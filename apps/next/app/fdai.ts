/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/v3/units": {
    /**
     * Get units
     * @description Get a list of the available measurement units
     */
    get: operations["getUnits"];
  };
  "/v3/variables": {
    /**
     * Get variables along with related user-specific analysis settings and statistics
     * @description Get variables. If the user has specified variable settings, these are provided instead of the common variable defaults.
     */
    get: operations["getVariables"];
    /**
     * Update User Settings for a Variable
     * @description Users can change the parameters used in analysis of that variable such as the expected duration of action for a variable to have an effect, the estimated delay before the onset of action. In order to filter out erroneous data, they are able to set the maximum and minimum reasonable daily values for a variable.
     */
    post: operations["postUserVariables"];
  };
  "/v3/measurements": {
    /**
     * Get measurements for this user
     * @description Measurements are any value that can be recorded like daily steps, a mood rating, or apples eaten.
     */
    get: operations["getMeasurements"];
  };
  "/v3/measurements/post": {
    /**
     * Post a new set or update existing measurements to the database
     * @description You can submit or update multiple measurements in a "measurements" sub-array.  If the variable these measurements correspond to does not already exist in the database, it will be automatically added.
     */
    post: operations["postMeasurements"];
  };
  "/v3/measurements/update": {
    /**
     * Update a measurement
     * @description Update a previously submitted measurement
     */
    post: operations["updateMeasurement"];
  };
  "/v3/measurements/delete": {
    /**
     * Delete a measurement
     * @description Delete a previously submitted measurement
     */
    delete: operations["deleteMeasurement"];
  };
  "/v3/appSettings": {
    /**
     * Get client app settings
     * @description Get the settings for your application configurable at https://builder.quantimo.do
     */
    get: operations["getAppSettings"];
  };
  "/v2/spreadsheetUpload": {
    /**
     * Upload a spreadsheet with measurements
     * @description Import from a spreadsheet containing a Variable Name, Value, Measurement Event Time, and Abbreviated Unit Name field.  Here is an <a href="https://bit.ly/2jz7CNl" target="_blank">example spreadsheet</a> with allowed column names, units and time format.
     */
    post: operations["measurementSpreadsheetUpload"];
  };
  "/v2/measurements/exportRequest": {
    /**
     * Post Request for Measurements CSV
     * @description Use this endpoint to schedule a CSV export containing all user measurements to be emailed to the user within 24 hours.
     */
    post: operations["measurementExportRequest"];
  };
  "/v3/connect/mobile": {
    /**
     * Mobile connect page
     * @description This page is designed to be opened in a webview.  Instead of using popup authentication boxes, it uses redirection. You can include the user's access_token as a URL parameter like https://api.quantimo.do/api/v3/connect/mobile?access_token=123
     */
    get: operations["getMobileConnectPage"];
  };
  "/v3/connectors/list": {
    /**
     * List of Connectors
     * @description A connector pulls data from other data providers using their API or a screenscraper. Returns a list of all available connectors and information about them such as their id, name, whether the user has provided access, logo url, connection instructions, and the update history.
     */
    get: operations["getConnectors"];
  };
  "/v3/connectors/{connectorName}/connect": {
    /**
     * Obtain a token from 3rd party data source
     * @description Attempt to obtain a token from the data provider, store it in the database. With this, the connector to continue to obtain new user data until the token is revoked.
     */
    get: operations["connectConnector"];
  };
  "/v3/connectors/{connectorName}/disconnect": {
    /**
     * Delete stored connection info
     * @description The disconnect method deletes any stored tokens or connection information from the connectors database.
     */
    get: operations["disconnectConnector"];
  };
  "/v3/connectors/{connectorName}/update": {
    /**
     * Sync with data source
     * @description The update method tells the QM Connector Framework to check with the data provider (such as Fitbit or MyFitnessPal) and retrieve any new measurements available.
     */
    get: operations["updateConnector"];
  };
  "/v3/correlations": {
    /**
     * Get user_variable_relationships
     * @description Get a list of user_variable_relationships that can be used to display top predictors of a given outcome like mood, for instance.
     */
    get: operations["getCorrelations"];
  };
  "/v3/deviceTokens": {
    /**
     * Post DeviceTokens
     * @description Post user token for Android, iOS, or web push notifications
     */
    post: operations["postDeviceToken"];
  };
  "/v3/feed": {
    /**
     * Tracking reminder notifications, messages, and study results
     * @description Tracking reminder notifications, messages, and study results
     */
    get: operations["getFeed"];
    /**
     * Post user interactions with feed
     * @description Post user actions on feed cards
     */
    post: operations["postFeed"];
  };
  "/v3/integration.js": {
    /**
     * Get embeddable connect javascript
     * @description Get embeddable connect javascript. Usage:
     *   - Embedding in applications with popups for 3rd-party authentication
     * windows.
     *     Use `qmSetupInPopup` function after connecting `connect.js`.
     *   - Embedding in applications with popups for 3rd-party authentication
     * windows.
     *     Requires a selector to block. It will be embedded in this block.
     *     Use `qmSetupOnPage` function after connecting `connect.js`.
     *   - Embedding in mobile applications without popups for 3rd-party
     * authentication.
     *     Use `qmSetupOnMobile` function after connecting `connect.js`.
     *     If using in a Cordova application call  `qmSetupOnIonic` function after connecting `connect.js`.
     */
    get: operations["getIntegrationJs"];
  };
  "/v3/notificationPreferences": {
    /**
     * Get NotificationPreferences
     * @description Get NotificationPreferences
     */
    get: operations["getNotificationPreferences"];
  };
  "/oauth/authorize": {
    /**
     * Request Authorization Code
     * @description You can implement OAuth2 authentication to your application using our **OAuth2** endpoints.  You need to redirect users to `/oauth/authorize` endpoint to get an authorization code and include the parameters below.   This page will ask the user if they want to allow a client's application to submit or obtain data from their QM account. It will redirect the user to the url provided by the client application with the code as a query parameter or error in case of an error. See the /oauth/access_token endpoint for the next steps.
     */
    get: operations["getOauthAuthorizationCode"];
  };
  "/oauth/token": {
    /**
     * Get a user access token
     * @description Client provides authorization token obtained from /oauth/authorize to this endpoint and  receives an access token. Access token can then be used to query API endpoints. ### Request Access Token After user approves your access to the given scope form the https:/api.quantimo.do/oauth/authorize endpoint, you'll receive an authorization code to request an access token. This time make a `POST` request to `/oauth/access_token` with parameters including: * `grant_type` Can be `authorization_code` or `refresh_token` since we are getting the `access_token` for the first time we don't have a `refresh_token` so this must be `authorization_code`. * `code` Authorization code you received with the previous request. * `redirect_uri` Your application's redirect url. ### Refreshing Access Token Access tokens expire at some point, to continue using our api you need to refresh them with `refresh_token` you received along with the `access_token`. To do this make a `POST` request to `/oauth/access_token` with correct parameters, which are: * `grant_type` This time grant type must be `refresh_token` since we have it. * `clientId` Your application's client id. * `client_secret` Your application's client secret. * `refresh_token` The refresh token you received with the `access_token`. Every request you make to this endpoint will give you a new refresh token and make the old one expired. So you can keep getting new access tokens with new refresh tokens. ### Using Access Token Currently we support 2 ways for this, you can't use both at the same time. * Adding access token to the request header as `Authorization: Bearer {access_token}` * Adding to the url as a query parameter `?access_token={access_token}` You can read more about OAuth2 from [here](https://oauth.net/2/)
     */
    get: operations["getAccessToken"];
  };
  "/v3/shares": {
    /**
     * Get Authorized Apps, Studies, and Individuals
     * @description This is a list of individuals, apps, or studies with access to your measurements.
     */
    get: operations["getShares"];
  };
  "/v3/shares/delete": {
    /**
     * Delete share
     * @description Remove access to user data for a given client_id associated with a given individual, app, or study
     */
    post: operations["deleteShare"];
  };
  "/v3/shares/invite": {
    /**
     * Delete share
     * @description Invite someone to view your measurements
     */
    post: operations["inviteShare"];
  };
  "/v3/studies": {
    /**
     * Get Personal or Population Studies
     * @description If you have enough data, this will be a list of your personal studies, otherwise it will consist of aggregated population studies.
     */
    get: operations["getStudies"];
  };
  "/v3/studies/open": {
    /**
     * These are open studies that anyone can join
     * @description These are studies that anyone can join and share their data for the predictor and outcome variables of interest.
     */
    get: operations["getOpenStudies"];
  };
  "/v3/studies/joined": {
    /**
     * Studies You Have Joined
     * @description These are studies that you are currently sharing your data with.
     */
    get: operations["getStudiesJoined"];
  };
  "/v3/studies/created": {
    /**
     * Get studies you have created
     * @description These are studies that you have created.
     */
    get: operations["getStudiesCreated"];
  };
  "/v3/study/publish": {
    /**
     * Publish Your Study
     * @description Make a study and all related measurements publicly visible by anyone
     */
    post: operations["publishStudy"];
  };
  "/v3/study/join": {
    /**
     * Join a Study
     * @description Anonymously share measurements for specified variables
     */
    post: operations["joinStudy"];
  };
  "/v3/study/create": {
    /**
     * Create a Study
     * @description Create an individual, group, or population study examining the relationship between a predictor and outcome variable. You will be given a study id which you can invite participants to join and share their measurements for the specified variables.
     */
    post: operations["createStudy"];
  };
  "/v3/trackingReminderNotifications": {
    /**
     * Get specific tracking reminder notifications
     * @description Specific tracking reminder notification instances that still need to be tracked.
     */
    get: operations["getTrackingReminderNotifications"];
    /**
     * Snooze, skip, or track a tracking reminder notification
     * @description Snooze, skip, or track a tracking reminder notification
     */
    post: operations["postTrackingReminderNotifications"];
  };
  "/v3/trackingReminders": {
    /**
     * Get repeating tracking reminder settings
     * @description Users can be reminded to track certain variables at a specified frequency with a default value.
     */
    get: operations["getTrackingReminders"];
    /**
     * Store a Tracking Reminder
     * @description This is to enable users to create reminders to track a variable with a default value at a specified frequency
     */
    post: operations["postTrackingReminders"];
  };
  "/v3/trackingReminders/delete": {
    /**
     * Delete Tracking Reminder
     * @description Stop getting notifications to record data for a variable.  Previously recorded measurements will be preserved.
     */
    delete: operations["deleteTrackingReminder"];
  };
  "/v3/unitCategories": {
    /**
     * Get unit categories
     * @description Get a list of the categories of measurement units such as 'Distance', 'Duration', 'Energy', 'Frequency', 'Miscellany', 'Pressure', 'Proportion', 'Rating', 'Temperature', 'Volume', and 'Weight'.
     */
    get: operations["getUnitCategories"];
  };
  "/v3/user": {
    /**
     * Get user info
     * @description Returns user info.  If no userId is specified, returns info for currently authenticated user
     */
    get: operations["getUser"];
    /**
     * Create or update user
     * @description Include your your system's user id as the clientUserId to make sure you can identify the user in your system. If the user already exists, the user will be updated with the new information.
     */
    post: operations["postUser"];
  };
  "/v3/users": {
    /**
     * Get users who shared data
     * @description Returns users who have granted access to their data
     */
    get: operations["getUsers"];
  };
  "/v3/user/delete": {
    /**
     * Delete user
     * @description Delete user account. Only the client app that created a user can delete that user.
     */
    delete: operations["deleteUser"];
  };
  "/v3/userSettings": {
    /**
     * Post UserSettings
     * @description Post UserSettings
     */
    post: operations["postUserSettings"];
  };
  "/v3/userTags": {
    /**
     * Post or update user tags or ingredients
     * @description This endpoint allows users to tag foods with their ingredients.  This information will then be used to infer the user intake of the different ingredients by just entering the foods. The inferred intake levels will then be used to determine the effects of different nutrients on the user during analysis.
     */
    post: operations["postUserTags"];
  };
  "/v3/userTags/delete": {
    /**
     * Delete user tag or ingredient
     * @description Delete previously created user tags or ingredients.
     */
    delete: operations["deleteUserTag"];
  };
  "/v3/userVariables/delete": {
    /**
     * Delete All Measurements For Variable
     * @description Users can delete all of their measurements for a variable
     */
    delete: operations["deleteUserVariable"];
  };
  "/v3/userVariables/reset": {
    /**
     * Reset user settings for a variable to defaults
     * @description Reset user settings for a variable to defaults
     */
    post: operations["resetUserVariableSettings"];
  };
  "/v3/variableCategories": {
    /**
     * Variable categories
     * @description The variable categories include Activity, Causes of Illness, Cognitive Performance, Conditions, Environment, Foods, Location, Miscellaneous, Mood, Nutrition, Physical Activity, Physique, Sleep, Social Interactions, Symptoms, Treatments, Vital Signs, and Goals.
     */
    get: operations["getVariableCategories"];
  };
  "/v3/votes": {
    /**
     * Post or update vote
     * @description I am really good at finding user_variable_relationships and even compensating for various onset delays and durations of action. However, you are much better than me at knowing if there's a way that a given factor could plausibly influence an outcome. You can help me learn and get better at my predictions by pressing the thumbs down button for relationships that you think are coincidences and thumbs up once that make logic sense.
     */
    post: operations["postVote"];
  };
  "/v3/votes/delete": {
    /**
     * Delete vote
     * @description Delete previously posted vote
     */
    delete: operations["deleteVote"];
  };
  "/v4/study": {
    /**
     * Get Study
     * @description Get Study
     */
    get: operations["getStudy"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    AppSettings: {
      additionalSettings?: Record<string, never>;
      appDescription?: string;
      appDesign?: Record<string, never>;
      appDisplayName?: string;
      appStatus?: Record<string, never>;
      appType?: string;
      buildEnabled?: string;
      /** @description Get yours at https:://builder.quantimo.do */
      clientId?: string;
      /** @description Get yours at https:://builder.quantimo.do */
      clientSecret?: string;
      collaborators?: components["schemas"]["User"][];
      createdAt?: string;
      /**
       * Format: int32
       * @description User id of the owner of the application
       */
      userId?: number;
      users?: components["schemas"]["User"][];
      redirectUri?: string;
      companyName?: string;
      homepageUrl?: string;
      iconUrl?: string;
      longDescription?: string;
      splashScreen?: string;
      textLogo?: string;
    };
    AppSettingsResponse: {
      appSettings?: components["schemas"]["AppSettings"];
      /** @description Can be used as body of help info popup */
      description: string;
      /** @description Can be used as title in help info popup */
      summary: string;
      /** @description Array of error objects with message property */
      errors?: components["schemas"]["ErrorResponse"][];
      /** @description ex. OK or ERROR */
      status?: string;
      /** @description true or false */
      success?: boolean;
      /** @description Response code such as 200 */
      code?: number;
      /** @description A super neat url you might want to share with your users! */
      link?: string;
      card?: components["schemas"]["Card"];
    };
    AuthorizedClients: {
      /** @description Applications with access to user measurements for all variables */
      apps: components["schemas"]["AppSettings"][];
      /** @description Individuals such as physicians or family members with access to user measurements for all variables */
      individuals: components["schemas"]["AppSettings"][];
      /** @description Studies with access to generally anonymous user measurements for a specific predictor and outcome variable */
      studies: components["schemas"]["AppSettings"][];
    };
    Button: {
      /** @description Ex: connect */
      accessibilityText?: string;
      /** @description Action data */
      action?: Record<string, never>;
      /** @description Ex: connect */
      additionalInformation?: string;
      /** @description Ex: #f2f2f2 */
      color?: string;
      /** @description Text to show user before executing functionName */
      confirmationText?: string;
      /** @description Name of function to call */
      functionName?: string;
      /** @description Data to provide to functionName or be copied to the card parameters when button is clicked and card is posted to the API */
      parameters?: Record<string, never>;
      /** @description Ex: connect */
      html?: string;
      /** @description HTML element id */
      id?: string;
      /** @description Ex: https://image.jpg */
      image?: string;
      /** @description Ex: ion-refresh */
      ionIcon?: string;
      /** @description Ex: https://local.quantimo.do */
      link: string;
      /** @description State to go to */
      stateName?: string;
      /** @description Data to provide to the state */
      stateParams?: Record<string, never>;
      /** @description Text to show user after executing functionName */
      successToastText?: string;
      /** @description Text to show user after executing functionName */
      successAlertTitle?: string;
      /** @description Text to show user after executing functionName */
      successAlertBody?: string;
      /** @description Ex: Connect */
      text: string;
      /** @description Ex: This is a tooltip */
      tooltip?: string;
      /** @description Post here on button click */
      webhookUrl?: string;
    };
    Card: {
      actionSheetButtons?: components["schemas"]["Button"][];
      /** @description Smaller square image */
      avatar?: string;
      /** @description Smaller circular image */
      avatarCircular?: string;
      /** @description Ex: #f2f2f2 */
      backgroundColor?: string;
      buttons?: components["schemas"]["Button"][];
      buttonsSecondary?: components["schemas"]["Button"][];
      /** @description Ex: Content */
      content?: string;
      /** @description Ex: Title */
      headerTitle?: string;
      /** @description HTML for the entire card. */
      html?: string;
      /** @description Ex: <div>Content</div> */
      htmlContent?: string;
      /** @description HTML element id */
      id: string;
      /** @description Larger image of variable dimensions */
      image?: string;
      inputFields?: components["schemas"]["InputField"][];
      /** @description Ex: ion-refresh */
      ionIcon?: string;
      /** @description A link to a web page or something. Not much more to say about that. */
      link?: string;
      /** @description Key value pairs derived from user input fields, button clicks, or preset defaults */
      parameters?: Record<string, never>;
      selectedButton?: components["schemas"]["Button"];
      /** @description Ex: sharingBody */
      sharingBody?: string;
      sharingButtons?: components["schemas"]["Button"][];
      /** @description Ex: sharingTitle */
      sharingTitle?: string;
      /** @description Ex: subTitle */
      subHeader?: string;
      /** @description Ex: subTitle */
      subTitle?: string;
      /** @description Ex: Title */
      title?: string;
    };
    Chart: {
      /** @description  Highcharts config that can be used if you have highcharts.js included on the page */
      highchartConfig?: Record<string, never>;
      /** @description Ex: correlationScatterPlot */
      chartId?: string;
      /** @description Ex: Overall Mood following Sleep Duration (R = -0.173) */
      chartTitle?: string;
      /** @description Ex: The chart above indicates that an increase in Sleep Duration is usually followed by a decrease in Overall Mood. */
      explanation?: string;
      /** @description Url to a static svg of the chart */
      svgUrl?: string;
      /** @description SVG string than can be embedded directly in HTML */
      svg?: string;
    };
    CommonResponse: {
      /** @description Can be used as body of help info popup */
      description: string;
      /** @description Can be used as title in help info popup */
      summary: string;
      /** @description Array of error objects with message property */
      errors?: components["schemas"]["ErrorResponse"][];
      /** @description ex. OK or ERROR */
      status?: string;
      /** @description true or false */
      success?: boolean;
      /** @description Response code such as 200 */
      code?: number;
      /** @description A super neat url you might want to share with your users! */
      link?: string;
      card?: components["schemas"]["Card"];
    };
    ConnectInstructions: {
      /** @description Create a form with these fields and post the key and user submitted value to the provided connect url */
      parameters?: Record<string, never>[];
      /** @description URL to open to connect */
      url: string;
      /** @description True if should open auth window in popup */
      usePopup?: boolean;
    };
    ConversionStep: {
      /**
       * @description ADD or MULTIPLY
       * @enum {string}
       */
      operation: "ADD" | "MULTIPLY";
      /**
       * Format: double
       * @description This specifies the order of conversion steps starting with 0
       */
      value: number;
    };
    HyperParameterCorrelation: {
      /**
       * Format: double
       * @description Ex: 4.19
       */
      averageDailyHighCause?: number;
      /**
       * Format: double
       * @description Ex: 1.97
       */
      averageDailyLowCause?: number;
      /**
       * Format: double
       * @description Ex: 3.0791054117396
       */
      averageEffect?: number;
      /**
       * Format: double
       * @description Ex: 3.55
       */
      averageEffectFollowingHighCause?: number;
      /**
       * Format: double
       * @description Ex: 2.65
       */
      averageEffectFollowingLowCause?: number;
      /**
       * Format: double
       * @description Ex: 0.396
       */
      averageForwardPearsonCorrelationOverOnsetDelays?: number;
      /**
       * Format: double
       * @description Ex: 0.453667
       */
      averageReversePearsonCorrelationOverOnsetDelays?: number;
      /** @description Ex: 0.9855 */
      averageVote?: number;
      /** @description Ex: 164 */
      causeChanges?: number;
      causeDataSource?: components["schemas"]["DataSource"];
      /** @description Ex: 1 */
      causeUserVariableShareUserMeasurements?: number;
      /** @description Ex: 6 */
      causeVariableCategoryId?: number;
      /** @description Ex: Sleep */
      causeVariableCategoryName?: string;
      /** @description Ex: MEAN */
      causeVariableCombinationOperation?: string;
      /** @description Ex: /5 */
      causeVariableUnitAbbreviatedName?: string;
      /** @description Ex: 1448 */
      causeVariableId?: number;
      /** @description Ex: 6 */
      causeVariableMostCommonConnectorId?: number;
      /** @description Ex: Sleep Quality */
      causeVariableName: string;
      /**
       * Format: double
       * @description Ex: 0.14344467795996
       */
      confidenceInterval?: number;
      /** @description Ex: high */
      confidenceLevel?: string;
      /**
       * Format: double
       * @description Ex: 0.538
       */
      correlationCoefficient?: number;
      /** @description Ex: false */
      correlationIsContradictoryToOptimalValues?: boolean;
      /** @description Ex: 2016-12-28 20:47:30 UTC ISO 8601 YYYY-MM-DDThh:mm:ss */
      createdAt?: string;
      /**
       * Format: double
       * @description Calculated Statistic: Ex: 1.646
       */
      criticalTValue?: number;
      /** @description Ex: higher */
      direction?: string;
      /** @description User-Defined Variable Setting: The amount of time over which a predictor/stimulus event can exert an observable influence on an outcome variable value. For instance, aspirin (stimulus/predictor) typically decreases headache severity for approximately four hours (duration of action) following the onset delay.  Unit: Seconds */
      durationOfAction?: number;
      /**
       * Format: float
       * @description User-Defined Variable Setting: The amount of time over which a predictor/stimulus event can exert an observable influence on an outcome variable value. For instance, aspirin (stimulus/predictor) typically decreases headache severity for approximately four hours (duration of action) following the onset delay.  Unit: Hours
       */
      durationOfActionInHours?: number;
      /** @description Ex: 200 */
      degreesOfFreedom?: number;
      /** @description Ex: 145 */
      effectNumberOfProcessedDailyMeasurements?: number;
      /** @description Ex: optimalPearsonProduct is not defined */
      error?: string;
      /** @description Ex: 193 */
      effectChanges?: number;
      effectDataSource?: components["schemas"]["DataSource"];
      /** @description Ex: moderately positive */
      effectSize?: string;
      /** @description Ex: /5 */
      effectUnit?: string;
      /** @description Ex: 1 */
      effectUserVariableShareUserMeasurements?: number;
      /** @description Ex: 1 */
      effectVariableCategoryId?: number;
      /** @description Ex: Emotions */
      effectVariableCategoryName?: string;
      /** @description Ex: MEAN */
      effectVariableCombinationOperation?: string;
      /** @description Ex: Mood_(psychology) */
      effectVariableCommonAlias?: string;
      /** @description Ex: /5 */
      effectVariableUnitAbbreviatedName?: string;
      /** @description Ex: 10 */
      effectVariableUnitId?: number;
      /** @description Ex: 1 to 5 Rating */
      effectVariableUnitName?: string;
      /** @description Ex: 1398 */
      effectVariableId?: number;
      /** @description Ex: 10 */
      effectVariableMostCommonConnectorId?: number;
      /** @description Ex: Overall Mood */
      effectVariableName: string;
      /** @description Ex: 2014-07-30 12:50:00 UTC ISO 8601 YYYY-MM-DDThh:mm:ss */
      experimentEndTime?: string;
      /** @description Ex: 2012-05-06 21:15:00 UTC ISO 8601 YYYY-MM-DDThh:mm:ss */
      experimentStartTime?: string;
      /**
       * Format: double
       * @description Ex: 0.528359
       */
      forwardSpearmanCorrelationCoefficient?: number;
      /** @description Ex: 298 */
      numberOfPairs?: number;
      /** @description Ex: 0 */
      onsetDelay?: number;
      /**
       * Format: float
       * @description Ex: 0
       */
      onsetDelayInHours?: number;
      /** @description Ex: -86400 */
      onsetDelayWithStrongestPearsonCorrelation?: number;
      /**
       * Format: float
       * @description Ex: -24
       */
      onsetDelayWithStrongestPearsonCorrelationInHours?: number;
      /**
       * Format: double
       * @description Ex: 0.68582816186982
       */
      optimalPearsonProduct?: number;
      /** @description User-Defined Variable Setting: Ex: -1. Unit: User-specified or common. */
      outcomeFillingValue?: number;
      /**
       * Format: double
       * @description User-Defined Variable Setting: Ex: 23. Unit: User-specified or common.
       */
      outcomeMaximumAllowedValue?: number;
      /**
       * Format: double
       * @description User-Defined Variable Setting: Ex: 0.1. Unit: User-specified or common.
       */
      outcomeMinimumAllowedValue?: number;
      /**
       * Format: double
       * @description Ex: 0.477
       */
      pearsonCorrelationWithNoOnsetDelay?: number;
      /**
       * Format: double
       * @description Ex: 0.538
       */
      predictivePearsonCorrelation?: number;
      /**
       * Format: double
       * @description Ex: 0.538
       */
      predictivePearsonCorrelationCoefficient?: number;
      /** @description Ex: RescueTime */
      predictorDataSources?: string;
      /** @description Ex: -1. Unit: User-specified or common. */
      predictorFillingValue?: number;
      /**
       * Format: double
       * @description Ex: 200. Unit: User-specified or common.
       */
      predictorMaximumAllowedValue?: number;
      /**
       * Format: double
       * @description Ex: 30. Unit: User-specified or common.
       */
      predictorMinimumAllowedValue?: number;
      /** @description Ex: 17. Unit: User-specified or common. */
      predictsHighEffectChange?: number;
      /** @description Ex: -11. Unit: User-specified or common. */
      predictsLowEffectChange?: number;
      /**
       * Format: double
       * @description Ex: 0.39628900511586
       */
      pValue?: number;
      /**
       * Format: double
       * @description Ex: 0.528
       */
      qmScore?: number;
      /**
       * Format: double
       * @description Ex: 0.01377184270977
       */
      reversePearsonCorrelationCoefficient?: number;
      /** @description Would you like to make this study publicly visible? */
      shareUserMeasurements?: boolean;
      /** @description Ex: N1 Study: Sleep Quality Predicts Higher Overall Mood */
      sharingDescription?: string;
      /** @description Ex: N1 Study: Sleep Quality Predicts Higher Overall Mood */
      sharingTitle?: string;
      /** @description Ex: 1 */
      significantDifference?: boolean;
      /**
       * Format: double
       * @description Ex: 0.9813
       */
      statisticalSignificance?: number;
      /** @description Ex: moderate */
      strengthLevel?: string;
      /**
       * Format: double
       * @description Ex: 0.613
       */
      strongestPearsonCorrelationCoefficient?: number;
      studyHtml?: components["schemas"]["StudyHtml"];
      studyImages?: components["schemas"]["StudyImages"];
      studyLinks?: components["schemas"]["StudyLinks"];
      studyText?: components["schemas"]["StudyText"];
      /**
       * Format: double
       * @description Ex: 9.6986079652717
       */
      tValue?: number;
      /** @description Ex: 2017-05-06 15:40:38 UTC ISO 8601 YYYY-MM-DDThh:mm:ss */
      updatedAt?: string;
      /** @description Ex: 230 */
      userId?: number;
      /** @description Ex: 1 */
      userVote?: number;
      /**
       * Format: double
       * @description Ex: 4.14
       */
      valuePredictingHighOutcome?: number;
      /**
       * Format: double
       * @description Ex: 3.03
       */
      valuePredictingLowOutcome?: number;
      /** @description Sources used to collect data for the outcome variable */
      outcomeDataSources?: string;
      /** @description Mike Sinn */
      principalInvestigator?: string;
      /** @description User Variable Relationship when cause and effect are reversed. For any causal relationship, the forward correlation should exceed the reverse correlation. */
      reverseCorrelation?: number;
      /**
       * Format: float
       * @description Ex:
       */
      averagePearsonCorrelationCoefficientOverOnsetDelays?: number;
      /** @description Ex: 14764 */
      causeNumberOfRawMeasurements?: number;
      /** @description Ex: 1 */
      numberOfUsers?: number;
      /**
       * Format: double
       * @description Ex: 1
       */
      rawCauseMeasurementSignificance?: number;
      /**
       * Format: double
       * @description Ex: 1
       */
      rawEffectMeasurementSignificance?: number;
      /** @description Ex: 1 */
      reversePairsCount?: string;
      /** @description Ex: 1 */
      voteStatisticalSignificance?: number;
      /**
       * Format: double
       * @description Ex: 0.011598441286655
       */
      aggregateQMScore?: number;
      /**
       * Format: double
       * @description Ex: 0.0333
       */
      forwardPearsonCorrelationCoefficient?: number;
      /** @description Ex: 6 */
      numberOfCorrelations?: number;
      /** @description Ex: 1 or 0 */
      vote?: number;
    };
    Correlation: {
      /**
       * Format: double
       * @description Ex: 4.19
       */
      averageDailyHighCause?: number;
      /**
       * Format: double
       * @description Ex: 1.97
       */
      averageDailyLowCause?: number;
      /**
       * Format: double
       * @description Ex: 3.0791054117396
       */
      averageEffect?: number;
      /**
       * Format: double
       * @description Ex: 3.55
       */
      averageEffectFollowingHighCause?: number;
      /**
       * Format: double
       * @description Ex: 2.65
       */
      averageEffectFollowingLowCause?: number;
      /**
       * Format: double
       * @description Ex: 0.396
       */
      averageForwardPearsonCorrelationOverOnsetDelays?: number;
      /**
       * Format: double
       * @description Ex: 0.453667
       */
      averageReversePearsonCorrelationOverOnsetDelays?: number;
      /** @description Ex: 0.9855 */
      averageVote?: number;
      /** @description Ex: 164 */
      causeChanges?: number;
      causeDataSource?: components["schemas"]["DataSource"];
      /** @description Ex: 1 */
      causeUserVariableShareUserMeasurements?: number;
      /** @description Ex: 6 */
      causeVariableCategoryId?: number;
      /** @description Ex: Sleep */
      causeVariableCategoryName?: string;
      /** @description Ex: MEAN */
      causeVariableCombinationOperation?: string;
      /** @description Ex: /5 */
      causeVariableUnitAbbreviatedName?: string;
      /** @description Ex: 1448 */
      causeVariableId?: number;
      /** @description Ex: 6 */
      causeVariableMostCommonConnectorId?: number;
      /** @description Ex: Sleep Quality */
      causeVariableName: string;
      /**
       * Format: double
       * @description Ex: 0.14344467795996
       */
      confidenceInterval?: number;
      /** @description Ex: high */
      confidenceLevel?: string;
      /**
       * Format: double
       * @description Ex: 0.538
       */
      correlationCoefficient?: number;
      /** @description Ex: false */
      correlationIsContradictoryToOptimalValues?: boolean;
      /** @description Ex: 2016-12-28 20:47:30 UTC ISO 8601 YYYY-MM-DDThh:mm:ss */
      createdAt?: string;
      /**
       * Format: double
       * @description Calculated Statistic: Ex: 1.646
       */
      criticalTValue?: number;
      /** @description Ex: higher */
      direction?: string;
      /** @description User-Defined Variable Setting: The amount of time over which a predictor/stimulus event can exert an observable influence on an outcome variable value. For instance, aspirin (stimulus/predictor) typically decreases headache severity for approximately four hours (duration of action) following the onset delay.  Unit: Seconds */
      durationOfAction?: number;
      /**
       * Format: float
       * @description User-Defined Variable Setting: The amount of time over which a predictor/stimulus event can exert an observable influence on an outcome variable value. For instance, aspirin (stimulus/predictor) typically decreases headache severity for approximately four hours (duration of action) following the onset delay.  Unit: Hours
       */
      durationOfActionInHours?: number;
      /** @description Ex: 200 */
      degreesOfFreedom?: number;
      /** @description Ex: 145 */
      effectNumberOfProcessedDailyMeasurements?: number;
      /** @description Ex: optimalPearsonProduct is not defined */
      error?: string;
      /** @description Ex: 193 */
      effectChanges?: number;
      effectDataSource?: components["schemas"]["DataSource"];
      /** @description Ex: moderately positive */
      effectSize?: string;
      /** @description Ex: /5 */
      effectUnit?: string;
      /** @description Ex: 1 */
      effectUserVariableShareUserMeasurements?: number;
      /** @description Ex: 1 */
      effectVariableCategoryId?: number;
      /** @description Ex: Emotions */
      effectVariableCategoryName?: string;
      /** @description Ex: MEAN */
      effectVariableCombinationOperation?: string;
      /** @description Ex: Mood_(psychology) */
      effectVariableCommonAlias?: string;
      /** @description Ex: /5 */
      effectVariableUnitAbbreviatedName?: string;
      /** @description Ex: 10 */
      effectVariableUnitId?: number;
      /** @description Ex: 1 to 5 Rating */
      effectVariableUnitName?: string;
      /** @description Ex: 1398 */
      effectVariableId?: number;
      /** @description Ex: 10 */
      effectVariableMostCommonConnectorId?: number;
      /** @description Ex: Overall Mood */
      effectVariableName: string;
      /** @description Ex: 2014-07-30 12:50:00 UTC ISO 8601 YYYY-MM-DDThh:mm:ss */
      experimentEndTime?: string;
      /** @description Ex: 2012-05-06 21:15:00 UTC ISO 8601 YYYY-MM-DDThh:mm:ss */
      experimentStartTime?: string;
      /**
       * Format: double
       * @description Ex: 0.528359
       */
      forwardSpearmanCorrelationCoefficient?: number;
      /** @description Ex: 298 */
      numberOfPairs?: number;
      /** @description Ex: 0 */
      onsetDelay?: number;
      /**
       * Format: float
       * @description Ex: 0
       */
      onsetDelayInHours?: number;
      /** @description Ex: -86400 */
      onsetDelayWithStrongestPearsonCorrelation?: number;
      /**
       * Format: float
       * @description Ex: -24
       */
      onsetDelayWithStrongestPearsonCorrelationInHours?: number;
      /**
       * Format: double
       * @description Ex: 0.68582816186982
       */
      optimalPearsonProduct?: number;
      /** @description User-Defined Variable Setting: Ex: -1. Unit: User-specified or common. */
      outcomeFillingValue?: number;
      /**
       * Format: double
       * @description User-Defined Variable Setting: Ex: 23. Unit: User-specified or common.
       */
      outcomeMaximumAllowedValue?: number;
      /**
       * Format: double
       * @description User-Defined Variable Setting: Ex: 0.1. Unit: User-specified or common.
       */
      outcomeMinimumAllowedValue?: number;
      /**
       * Format: double
       * @description Ex: 0.477
       */
      pearsonCorrelationWithNoOnsetDelay?: number;
      /**
       * Format: double
       * @description Ex: 0.538
       */
      predictivePearsonCorrelation?: number;
      /**
       * Format: double
       * @description Ex: 0.538
       */
      predictivePearsonCorrelationCoefficient?: number;
      /** @description Ex: RescueTime */
      predictorDataSources?: string;
      /** @description Ex: -1. Unit: User-specified or common. */
      predictorFillingValue?: number;
      /**
       * Format: double
       * @description Ex: 200. Unit: User-specified or common.
       */
      predictorMaximumAllowedValue?: number;
      /**
       * Format: double
       * @description Ex: 30. Unit: User-specified or common.
       */
      predictorMinimumAllowedValue?: number;
      /** @description Ex: 17. Unit: User-specified or common. */
      predictsHighEffectChange?: number;
      /** @description Ex: -11. Unit: User-specified or common. */
      predictsLowEffectChange?: number;
      /**
       * Format: double
       * @description Ex: 0.39628900511586
       */
      pValue?: number;
      /**
       * Format: double
       * @description Ex: 0.528
       */
      qmScore?: number;
      /**
       * Format: double
       * @description Ex: 0.01377184270977
       */
      reversePearsonCorrelationCoefficient?: number;
      /** @description Would you like to make this study publicly visible? */
      shareUserMeasurements?: boolean;
      /** @description Ex: N1 Study: Sleep Quality Predicts Higher Overall Mood */
      sharingDescription?: string;
      /** @description Ex: N1 Study: Sleep Quality Predicts Higher Overall Mood */
      sharingTitle?: string;
      /** @description Ex: 1 */
      significantDifference?: boolean;
      /**
       * Format: double
       * @description Ex: 0.9813
       */
      statisticalSignificance?: number;
      /** @description Ex: moderate */
      strengthLevel?: string;
      /**
       * Format: double
       * @description Ex: 0.613
       */
      strongestPearsonCorrelationCoefficient?: number;
      studyHtml?: components["schemas"]["StudyHtml"];
      studyImages?: components["schemas"]["StudyImages"];
      studyLinks?: components["schemas"]["StudyLinks"];
      studyText?: components["schemas"]["StudyText"];
      /**
       * Format: double
       * @description Ex: 9.6986079652717
       */
      tValue?: number;
      /** @description Ex: 2017-05-06 15:40:38 UTC ISO 8601 YYYY-MM-DDThh:mm:ss */
      updatedAt?: string;
      /** @description Ex: 230 */
      userId?: number;
      /** @description Ex: 1 */
      userVote?: number;
      /**
       * Format: double
       * @description Ex: 4.14
       */
      valuePredictingHighOutcome?: number;
      /**
       * Format: double
       * @description Ex: 3.03
       */
      valuePredictingLowOutcome?: number;
      /** @description Sources used to collect data for the outcome variable */
      outcomeDataSources?: string;
      /** @description Mike Sinn */
      principalInvestigator?: string;
      /** @description User Variable Relationship when cause and effect are reversed. For any causal relationship, the forward correlation should exceed the reverse correlation. */
      reverseCorrelation?: number;
      /**
       * Format: float
       * @description Ex:
       */
      averagePearsonCorrelationCoefficientOverOnsetDelays?: number;
      /** @description Ex: 14764 */
      causeNumberOfRawMeasurements?: number;
      /** @description VariableRelationships calculated with various duration of action hyper-parameters */
      correlationsOverDurationsOfAction?: components["schemas"]["HyperParameterCorrelation"][];
      /** @description VariableRelationships calculated with various onset delay hyper-parameters */
      correlationsOverOnsetDelays?: components["schemas"]["HyperParameterCorrelation"][];
      /** @description Highchart config illustrating user_variable_relationships calculated with various duration of action hyper-parameters */
      correlationsOverDurationsOfActionChartConfig?: Record<string, never>;
      /** @description Highchart config illustrating user_variable_relationships calculated with various onset delay hyper-parameters */
      correlationsOverOnsetDelaysChartConfig?: Record<string, never>;
      /** @description Ex: 1 */
      numberOfUsers?: number;
      /**
       * Format: double
       * @description Ex: 1
       */
      rawCauseMeasurementSignificance?: number;
      /**
       * Format: double
       * @description Ex: 1
       */
      rawEffectMeasurementSignificance?: number;
      /** @description Ex: 1 */
      reversePairsCount?: string;
      /** @description Ex: 1 */
      voteStatisticalSignificance?: number;
      /**
       * Format: double
       * @description Ex: 0.011598441286655
       */
      aggregateQMScore?: number;
      /**
       * Format: double
       * @description Ex: 0.0333
       */
      forwardPearsonCorrelationCoefficient?: number;
      /** @description Ex: 6 */
      numberOfCorrelations?: number;
      /** @description Ex: 1 or 0 */
      vote?: number;
    };
    DataSource: {
      /** @description Ex: true */
      affiliate: boolean;
      /** @description Background color HEX code that matches the icon */
      backgroundColor?: string;
      buttons?: components["schemas"]["Button"][];
      card?: components["schemas"]["Card"];
      /** @description Your client id can be obtained by creating an app at https://builder.quantimo.do */
      clientId?: string;
      /** @description True if the authenticated user has this connector enabled */
      connected?: boolean;
      /** @description Ex: Your token is expired. Please re-connect */
      connectError?: string;
      connectInstructions?: components["schemas"]["ConnectInstructions"];
      /** @description Ex: 8 */
      connectorId?: number;
      /** @description Ex: CONNECTED */
      connectStatus?: string;
      /** @description Number of measurements from this source or number of users who have measurements from this source */
      count?: number;
      /** @description Ex: 2000-01-01 00:00:00 UTC ISO 8601 YYYY-MM-DDThh:mm:ss */
      createdAt?: string;
      /** @description Ex: ba7d0c12432650e23b3ce924ae2d21e2ff59e7e4e28650759633700af7ed0a30 */
      connectorClientId: string;
      /** @description Ex: Foods */
      defaultVariableCategoryName: string;
      /** @description Ex: CureDAO */
      displayName: string;
      /** @description Ex: 0 */
      enabled: number;
      /** @description Ex: https://quantimo.do */
      getItUrl: string;
      /** @description Ex: 72 */
      id: number;
      /** @description Ex: https://safe.fdai.earth/img/logos/curedao-logo-qm-rainbow-200-200.png */
      image: string;
      /** @description Ex: <a href="https://quantimo.do"><img id="curedao_image" title="CureDAO" src="https://safe.fdai.earth/img/logos/curedao-logo-qm-rainbow-200-200.png" alt="CureDAO"></a> */
      imageHtml: string;
      /** @description Ex: 2017-07-31 10:10:34 UTC ISO 8601 YYYY-MM-DDThh:mm:ss */
      lastSuccessfulUpdatedAt?: string;
      /** @description Epoch timestamp of last sync */
      lastUpdate?: number;
      /** @description Ex: <a href="https://quantimo.do">CureDAO</a> */
      linkedDisplayNameHtml: string;
      /** @description Ex: CureDAO is a Chrome extension, Android app, iOS app, and web app that allows you to easily track mood, symptoms, or any outcome you want to optimize in a fraction of a second.  You can also import your data from over 30 other apps and devices like Fitbit, Rescuetime, Jawbone Up, Withings, Facebook, GitHub, Google Calendar, Runkeeper, MoodPanda, Slice, Google Fit, and more.  CureDAO then analyzes your data to identify which hidden factors are most likely to be influencing your mood or symptoms and their optimal daily values. */
      longDescription: string;
      /** @description Ex: Got 412 new measurements on 2017-07-31 10:10:34 */
      message?: string;
      /** @description Mobile connect method: webview, cordova, google, spreadsheet, or ip */
      mobileConnectMethod?: string;
      /** @description Ex: curedao */
      name: string;
      /** @description Platforms (chrome, android, ios, web) that you can connect on. */
      platforms?: string[];
      /** @description True if connection requires upgrade */
      premium?: boolean;
      /** @description Required connector scopes */
      scopes?: string[];
      /** @description Ex: Tracks anything */
      shortDescription: string;
      /** @description URL to POST a spreadsheet to (if available for this data source) */
      spreadsheetUploadLink?: string;
      /** @description Number of measurements obtained during latest update */
      totalMeasurementsInLastUpdate?: number;
      /** @description Ex: 2017-07-31 10:10:34 UTC ISO 8601 YYYY-MM-DDThh:mm:ss */
      updatedAt?: string;
      /** @description Ex: 2017-07-18 05:16:31 UTC ISO 8601 YYYY-MM-DDThh:mm:ss */
      updateRequestedAt?: string;
      /** @description Ex: UPDATED */
      updateStatus?: string;
      /** @description Ex: 230 */
      userId?: number;
    };
    DeviceToken: {
      /** @description Client id */
      clientId?: string;
      /** @description ios, android, or web */
      platform: string;
      /** @description The device token */
      deviceToken: string;
    };
    ErrorResponse: {
      /** @description Error message */
      message: string;
    };
    Explanation: {
      /** @description Ex: These factors are most predictive of Overall Mood based on your own data. */
      description: string;
      image: components["schemas"]["Image"];
      /** @description Ex: ion-ios-person */
      ionIcon: string;
      startTracking: components["schemas"]["ExplanationStartTracking"];
      /** @description Ex: Top Predictors of Overall Mood */
      title: string;
      /** @description Embeddable list of study summaries with explanation at the top */
      html?: string;
    };
    ExplanationStartTracking: {
      button: components["schemas"]["Button"];
      /** @description Ex: The more data I have the more accurate your results will be so track regularly! */
      description: string;
      /** @description Ex: Improve Accuracy */
      title: string;
    };
    InputField: {
      displayName: string;
      helpText?: string;
      hint?: string;
      icon?: string;
      /** @description HTML element id */
      id?: string;
      image?: string;
      key?: string;
      labelLeft?: string;
      labelRight?: string;
      link?: string;
      maxLength?: number;
      maxValue?: number;
      minLength?: number;
      minValue?: number;
      /** @description Selector list options */
      options?: string[];
      /** @description Ex: Title */
      placeholder?: string;
      postUrl?: string;
      required?: boolean;
      /** @description Ex: Title */
      show?: boolean;
      submitButton?: components["schemas"]["Button"];
      /**
       * @description Ex: Title
       * @enum {string}
       */
      type: "check_box" | "date" | "email" | "number" | "postal_code" | "select_option" | "string" | "switch" | "text_area" | "unit" | "variable_category";
      /** @description See https://html5pattern.com/ for examples */
      validationPattern?: string;
      value?: string;
    };
    GetConnectorsResponse: {
      connectors?: components["schemas"]["DataSource"][];
      /** @description Can be used as body of help info popup */
      description: string;
      /** @description Can be used as title in help info popup */
      summary: string;
      /** @description Array of error objects with message property */
      errors?: components["schemas"]["ErrorResponse"][];
      /** @description ex. OK or ERROR */
      status?: string;
      /** @description true or false */
      success?: boolean;
      /** @description Response code such as 200 */
      code?: number;
      /** @description A super neat url you might want to share with your users! */
      link?: string;
      card?: components["schemas"]["Card"];
    };
    GetCorrelationsDataResponse: {
      correlations: components["schemas"]["Correlation"][];
      explanation: components["schemas"]["Explanation"];
      /** @description Can be used as body of help info popup */
      description?: string;
      /** @description Can be used as title in help info popup */
      summary?: string;
      /** @description Array of error objects with message property */
      errors?: components["schemas"]["ErrorResponse"][];
      /** @description ex. OK or ERROR */
      status?: string;
      /** @description true or false */
      success?: boolean;
      /** @description Response code such as 200 */
      code?: number;
      /** @description A super neat url you might want to share with your users! */
      link?: string;
      card?: components["schemas"]["Card"];
    };
    GetCorrelationsResponse: {
      data?: components["schemas"]["GetCorrelationsDataResponse"];
      /** @description Can be used as body of help info popup */
      description: string;
      /** @description Can be used as title in help info popup */
      summary: string;
      /** @description Square icon png url */
      avatar?: string;
      /** @description Array of error objects with message property */
      errors?: components["schemas"]["ErrorResponse"][];
      /** @description ex. OK or ERROR */
      status?: string;
      /** @description true or false */
      success?: boolean;
      /** @description Response code such as 200 */
      code?: number;
      /** @description A super neat url you might want to share with your users! */
      link?: string;
      card?: components["schemas"]["Card"];
    };
    GetStudiesResponse: {
      studies?: components["schemas"]["Study"][];
      /** @description Ex: These factors are most predictive of Overall Mood based on your own data. */
      description: string;
      /** @description Can be used as title in help info popup */
      summary: string;
      image?: components["schemas"]["Image"];
      /** @description Square icon png url */
      avatar?: string;
      /** @description Ex: ion-ios-person */
      ionIcon?: string;
      startTracking?: components["schemas"]["ExplanationStartTracking"];
      /** @description Ex: Top Predictors of Overall Mood */
      title?: string;
      /** @description Embeddable list of study summaries with explanation at the top */
      html?: string;
    };
    GetSharesResponse: {
      authorizedClients?: components["schemas"]["AuthorizedClients"];
      /** @description Can be used as body of help info popup */
      description: string;
      /** @description Can be used as title in help info popup */
      summary: string;
      /** @description Array of error objects with message property */
      errors?: components["schemas"]["ErrorResponse"][];
      /** @description ex. OK or ERROR */
      status?: string;
      /** @description true or false */
      success?: boolean;
      /** @description Response code such as 200 */
      code?: number;
      /** @description A super neat url you might want to share with your users! */
      link?: string;
      card?: components["schemas"]["Card"];
    };
    FeedResponse: {
      cards: components["schemas"]["Card"][];
      /** @description Tracking reminder notifications, messages, and study result cards that can be displayed in user feed or stream */
      description: string;
      /** @description Tracking reminder notifications, messages, and study results */
      summary: string;
      /** @description Array of error objects with message property */
      errors?: components["schemas"]["ErrorResponse"][];
      /** @description ex. OK or ERROR */
      status?: string;
      /** @description true or false */
      success?: boolean;
      /** @description Response code such as 200 */
      code?: number;
      /** @description A super neat url you might want to share with your users! */
      link?: string;
      card?: components["schemas"]["Card"];
    };
    GetTrackingReminderNotificationsResponse: {
      data?: components["schemas"]["TrackingReminderNotification"][];
      /** @description Can be used as body of help info popup */
      description: string;
      /** @description Can be used as title in help info popup */
      summary: string;
      /** @description Array of error objects with message property */
      errors?: components["schemas"]["ErrorResponse"][];
      /** @description ex. OK or ERROR */
      status?: string;
      /** @description true or false */
      success?: boolean;
      /** @description Response code such as 200 */
      code?: number;
      /** @description A super neat url you might want to share with your users! */
      link?: string;
      card?: components["schemas"]["Card"];
    };
    Image: {
      /** @description Ex: 240 */
      height: string;
      /** @description Ex: https://www.filepicker.io/api/file/TjmeNWS5Q2SFmtJlUGLf */
      imageUrl: string;
      /** @description Ex: 224 */
      width: string;
    };
    JsonErrorResponse: {
      /** @description Error message */
      message?: string;
      /** @description Can be used as body of help info popup */
      description?: string;
      /** @description Can be used as title in help info popup */
      summary?: string;
      /** @description Array of error objects with message property */
      errors?: components["schemas"]["ErrorResponse"][];
      /** @description ex. OK or ERROR */
      status: string;
      /** @description true or false */
      success?: boolean;
      /** @description Response code such as 200 */
      code?: number;
      /** @description A super neat url you might want to share with your users! */
      link?: string;
      card?: components["schemas"]["Card"];
    };
    Measurement: {
      card?: components["schemas"]["Card"];
      /** @description Ex: curedao */
      clientId?: string;
      /** @description Ex: 13 */
      connectorId?: number;
      /** @description Ex: 2017-07-30 21:08:36 */
      createdAt?: string;
      /** @description Examples: 3/5, $10, or 1 count */
      displayValueAndUnitString?: string;
      /** @description Ex: ion-sad-outline */
      iconIcon?: string;
      /** @description Ex: 1051466127 */
      id?: number;
      /** @description Ex: value */
      inputType?: string;
      /** @description Ex: ion-ios-medkit-outline */
      ionIcon?: string;
      /** @description Ex: 1 */
      manualTracking?: boolean;
      /**
       * Format: double
       * @description Ex: 5. Unit: User-specified or common.
       */
      maximumAllowedValue?: number;
      /**
       * Format: double
       * @description Ex: 1. Unit: User-specified or common.
       */
      minimumAllowedValue?: number;
      /** @description Note of measurement */
      note?: string;
      /** @description Additional meta data for the measurement */
      noteObject?: Record<string, never>;
      /** @description Embeddable HTML with message hyperlinked with associated url */
      noteHtml?: Record<string, never>;
      /** @description Ex: 23 */
      originalUnitId?: number;
      /**
       * Format: double
       * @description Original value submitted. Unit: Originally submitted.
       */
      originalValue?: number;
      /** @description Ex: img/variable_categories/treatments.png */
      pngPath?: string;
      /** @description Ex: https://safe.fdai.earth/img/variable_categories/treatments.png */
      pngUrl?: string;
      /** @description Link to associated product for purchase */
      productUrl?: string;
      /** @description Application or device used to record the measurement values */
      sourceName: string;
      /** @description Ex: 2014-08-27 */
      startDate?: string;
      /** @description Seconds between the start of the event measured and 1970 (Unix timestamp) */
      startTimeEpoch?: number;
      /** @description Start Time for the measurement event in UTC ISO 8601 YYYY-MM-DDThh:mm:ss */
      startTimeString: string;
      /** @description Ex: https://safe.fdai.earth/img/variable_categories/treatments.svg */
      svgUrl?: string;
      /** @description Abbreviated name for the unit of measurement */
      unitAbbreviatedName: string;
      /** @description Ex: 6 */
      unitCategoryId?: number;
      /** @description Ex: Miscellany */
      unitCategoryName?: string;
      /** @description Ex: 23 */
      unitId?: number;
      /** @description Ex: Count */
      unitName?: string;
      /** @description Ex: 2017-07-30 21:08:36 */
      updatedAt?: string;
      /** @description Link to associated Facebook like or GitHub commit, for instance */
      url?: string;
      /** @description Ex: count */
      userVariableUnitAbbreviatedName?: string;
      /** @description Ex: 6 */
      userVariableUnitCategoryId?: number;
      /** @description Ex: Miscellany */
      userVariableUnitCategoryName?: string;
      /** @description Ex: 23 */
      userVariableUnitId?: number;
      /** @description Ex: Count */
      userVariableUnitName?: string;
      /** @description Ex: 13 */
      userVariableVariableCategoryId?: number;
      /** @description Ex: Treatments */
      userVariableVariableCategoryName?: string;
      /** @description Valence indicates what type of buttons should be used when recording measurements for this variable. positive - Face buttons with the happiest face equating to a 5/5 rating where higher is better like Overall Mood. negative - Face buttons with the happiest face equating to a 1/5 rating where lower is better like Headache Severity. numeric - Just 1 to 5 numeric buttons for neutral variables. */
      valence?: string;
      /**
       * Format: double
       * @description Converted measurement value in requested unit
       */
      value: number;
      /** @description Ex: 13 */
      variableCategoryId?: number;
      /** @description Ex: https://static.quantimo.do/img/variable_categories/pill-96.png */
      variableCategoryImageUrl?: string;
      /**
       * @description Ex: Emotions, Treatments, Symptoms...
       * @enum {string}
       */
      variableCategoryName?: "Activity" | "Books" | "Causes of Illness" | "Cognitive Performance" | "Conditions" | "Emotions" | "Environment" | "Foods" | "Goals" | "Locations" | "Miscellaneous" | "Movies and TV" | "Music" | "Nutrients" | "Payments" | "Physical Activities" | "Physique" | "Sleep" | "Social Interactions" | "Software" | "Symptoms" | "Treatments" | "Vital Signs";
      /** @description Valence indicates what type of buttons should be used when recording measurements for this variable. positive - Face buttons with the happiest face equating to a 5/5 rating where higher is better like Overall Mood. negative - Face buttons with the happiest face equating to a 1/5 rating where lower is better like Headache Severity. numeric - Just 1 to 5 numeric buttons for neutral variables. */
      variableDescription?: string;
      /** @description Ex: 5956846 */
      variableId?: number;
      /** @description Name of the variable for which we are creating the measurement records */
      variableName: string;
      /** @description Ex: Trader Joe's Bedtime Tea */
      displayName?: string;
    };
    MeasurementItem: {
      /** @description Optional note to include with the measurement */
      note?: string;
      /**
       * Format: int64
       * @description Timestamp for the measurement event in epoch time (unixtime)
       */
      timestamp: number;
      /**
       * Format: double
       * @description Measurement value
       */
      value: number;
    };
    MeasurementSet: {
      /**
       * @description Way to aggregate measurements over time. SUM should be used for things like minutes of exercise.  If you use MEAN for exercise, then a person might exercise more minutes in one day but add separate measurements that were smaller.  So when we are doing correlational analysis, we would think that the person exercised less that day even though they exercised more.  Conversely, we must use MEAN for things such as ratings which cannot be SUMMED.
       * @enum {string}
       */
      combinationOperation?: "MEAN" | "SUM";
      /** @description Array of timestamps, values, and optional notes */
      measurementItems: components["schemas"]["MeasurementItem"][];
      /** @description Name of the application or device used to record the measurement values */
      sourceName: string;
      /** @description Unit of measurement */
      unitAbbreviatedName: string;
      /**
       * @description Ex: Emotions, Treatments, Symptoms...
       * @enum {string}
       */
      variableCategoryName?: "Activity" | "Books" | "Causes of Illness" | "Cognitive Performance" | "Conditions" | "Emotions" | "Environment" | "Foods" | "Goals" | "Locations" | "Miscellaneous" | "Movies and TV" | "Music" | "Nutrients" | "Payments" | "Physical Activities" | "Physique" | "Sleep" | "Social Interactions" | "Software" | "Symptoms" | "Treatments" | "Vital Signs";
      /** @description ORIGINAL name of the variable for which we are creating the measurement records */
      variableName: string;
      /** @description UPC or other barcode scan result */
      upc?: string;
    };
    MeasurementUpdate: {
      /** @description Variable id of the measurement to be updated */
      id: number;
      /** @description The new note for the measurement (optional) */
      note?: string;
      /** @description The new timestamp for the the event in epoch seconds (optional) */
      startTime?: number;
      /**
       * Format: double
       * @description The new value of for the measurement (optional)
       */
      value?: number;
    };
    Pair: {
      /**
       * Format: double
       * @description Ex: 101341.66666667
       */
      causeMeasurement: number;
      /**
       * Format: double
       * @description Ex: 101341.66666667
       */
      causeMeasurementValue: number;
      /** @description Ex: mg */
      causeVariableUnitAbbreviatedName: string;
      /**
       * Format: double
       * @description Ex: 7.98
       */
      effectMeasurement: number;
      /**
       * Format: double
       * @description Ex: 7.98
       */
      effectMeasurementValue: number;
      /** @description Ex: % */
      effectVariableUnitAbbreviatedName: string;
      /** @description Ex: 2015-08-06 15:49:02 UTC ISO 8601 YYYY-MM-DDThh:mm:ss */
      eventAt?: string;
      /** @description Ex: 1438876142 */
      eventAtUnixTime?: number;
      /** @description Ex: 2015-08-06 15:49:02 UTC ISO 8601 YYYY-MM-DDThh:mm:ss */
      startTimeString?: string;
      /** @description Ex: 1464937200 */
      timestamp: number;
    };
    ParticipantInstruction: {
      /** @description Ex: <a href="https://www.amazon.com/Fitbit-Charge-Heart-Fitness-Wristband/dp/B01K9S260E/ref=as_li_ss_tl?ie=UTF8&qid=1493518902&sr=8-3&keywords=fitbit&th=1&linkCode=ll1&tag=quant08-20&linkId=b357b0833de73b0c4e935fd7c13a079e">Obtain Fitbit</a> and use it to record your Sleep Duration. Once you have a <a href="https://www.amazon.com/Fitbit-Charge-Heart-Fitness-Wristband/dp/B01K9S260E/ref=as_li_ss_tl?ie=UTF8&qid=1493518902&sr=8-3&keywords=fitbit&th=1&linkCode=ll1&tag=quant08-20&linkId=b357b0833de73b0c4e935fd7c13a079e">Fitbit</a> account, <a href="https://web.quantimo.do/#/app/import">connect your  Fitbit account at CureDAO</a> to automatically import and analyze your data. */
      instructionsForCauseVariable?: string;
      /** @description Ex: <a href="https://quantimo.do">Obtain CureDAO</a> and use it to record your Overall Mood. Once you have a <a href="https://quantimo.do">CureDAO</a> account, <a href="https://web.quantimo.do/#/app/import">connect your  CureDAO account at CureDAO</a> to automatically import and analyze your data. */
      instructionsForEffectVariable?: string;
    };
    PostMeasurementsDataResponse: {
      userVariables?: components["schemas"]["Variable"][];
      /** @description Can be used as body of help info popup */
      description?: string;
      /** @description Can be used as title in help info popup */
      summary?: string;
      /** @description Array of error objects with message property */
      errors?: components["schemas"]["ErrorResponse"][];
      /** @description ex. OK or ERROR */
      status?: string;
      /** @description true or false */
      success?: boolean;
      /** @description Response code such as 200 */
      code?: number;
      /** @description A super neat url you might want to share with your users! */
      link?: string;
      card?: components["schemas"]["Card"];
    };
    PostMeasurementsResponse: {
      data?: components["schemas"]["PostMeasurementsDataResponse"];
      /** @description Message */
      message?: string;
      /** @description Can be used as body of help info popup */
      description?: string;
      /** @description Can be used as title in help info popup */
      summary?: string;
      /** @description Array of error objects with message property */
      errors?: components["schemas"]["ErrorResponse"][];
      /** @description ex. OK or ERROR */
      status: string;
      /** @description true or false */
      success: boolean;
      /** @description Response code such as 200 */
      code?: number;
      /** @description A super neat url you might want to share with your users! */
      link?: string;
      card?: components["schemas"]["Card"];
    };
    PostStudyPublishResponse: {
      /** @description Can be used as body of help info popup */
      description?: string;
      /** @description Can be used as title in help info popup */
      summary?: string;
      /** @description Array of error objects with message property */
      errors?: components["schemas"]["ErrorResponse"][];
      /** @description ex. OK or ERROR */
      status?: string;
      /** @description true or false */
      success?: boolean;
      /** @description Response code such as 200 */
      code?: number;
      /** @description A super neat url you might want to share with your users! */
      link?: string;
      card?: components["schemas"]["Card"];
    };
    PostStudyCreateResponse: {
      study?: components["schemas"]["Study"];
      /** @description Can be used as body of help info popup */
      description?: string;
      /** @description Can be used as title in help info popup */
      summary?: string;
      /** @description Array of error objects with message property */
      errors?: components["schemas"]["ErrorResponse"][];
      /** @description ex. OK or ERROR */
      status?: string;
      /** @description true or false */
      success?: boolean;
      /** @description Response code such as 200 */
      code?: number;
      /** @description A super neat url you might want to share with your users! */
      link?: string;
      card?: components["schemas"]["Card"];
    };
    PostTrackingRemindersDataResponse: {
      trackingReminderNotifications?: components["schemas"]["TrackingReminderNotification"][];
      trackingReminders?: components["schemas"]["TrackingReminder"][];
      userVariables?: components["schemas"]["Variable"][];
      /** @description Can be used as body of help info popup */
      description?: string;
      /** @description Can be used as title in help info popup */
      summary?: string;
      /** @description Array of error objects with message property */
      errors?: components["schemas"]["ErrorResponse"][];
      /** @description ex. OK or ERROR */
      status?: string;
      /** @description true or false */
      success?: boolean;
      /** @description Response code such as 200 */
      code?: number;
      /** @description A super neat url you might want to share with your users! */
      link?: string;
      card?: components["schemas"]["Card"];
    };
    PostTrackingRemindersResponse: {
      data?: components["schemas"]["PostTrackingRemindersDataResponse"];
      /** @description Message */
      message?: string;
      /** @description Can be used as body of help info popup */
      description?: string;
      /** @description Can be used as title in help info popup */
      summary?: string;
      /** @description Array of error objects with message property */
      errors?: components["schemas"]["ErrorResponse"][];
      /** @description ex. OK or ERROR */
      status: string;
      /** @description true or false */
      success: boolean;
      /** @description Response code such as 200 */
      code?: number;
      /** @description A super neat url you might want to share with your users! */
      link?: string;
      card?: components["schemas"]["Card"];
    };
    PostUserSettingsDataResponse: {
      /** @description Ex: 1 */
      purchaseId?: number;
      /** @description Can be used as body of help info popup */
      description?: string;
      /** @description Can be used as title in help info popup */
      summary?: string;
      /** @description Array of error objects with message property */
      errors?: components["schemas"]["ErrorResponse"][];
      /** @description ex. OK or ERROR */
      status?: string;
      /** @description true or false */
      success?: boolean;
      /** @description Response code such as 200 */
      code?: number;
      /** @description A super neat url you might want to share with your users! */
      link?: string;
      card?: components["schemas"]["Card"];
    };
    PostUserSettingsResponse: {
      data?: components["schemas"]["PostUserSettingsDataResponse"];
      /** @description Message */
      message?: string;
      /** @description Can be used as body of help info popup */
      description?: string;
      /** @description Can be used as title in help info popup */
      summary?: string;
      /** @description Array of error objects with message property */
      errors?: components["schemas"]["ErrorResponse"][];
      /** @description ex. OK or ERROR */
      status: string;
      /** @description true or false */
      success: boolean;
      /** @description Response code such as 200 */
      code?: number;
      /** @description A super neat url you might want to share with your users! */
      link?: string;
      card?: components["schemas"]["Card"];
    };
    ShareInvitationBody: {
      /** @description Enter the email address of the friend, family member, or health-care provider that you would like to give access to your measurements */
      emailAddress: string;
      /** @description Name of the individual that the user wishes to have access to their measurements */
      name?: string;
      /** @description Ex: I would like to share my measurements with you! */
      emailSubject?: string;
      /** @description Ex: I would like to share my data with you so you can help me identify find discover hidden causes of and new treatments for my illness. */
      emailBody?: string;
      /** @description Space separated list of scopes to grant to the recipient (i.e. readmeasurements, writemeasurements, measurements:read */
      scopes?: string;
    };
    /** @description A study analyzes the relationship between a predictor variable like gluten-intake and an outcome of interest such as overall mood. */
    Study: {
      /** @description Ex: population, cohort, or individual */
      type: string;
      /**
       * Format: int32
       * @description The user id of the principal investigator or subject if an individual studies
       */
      userId?: number;
      /** @description ID of the cohort study which is necessary to allow participants to join */
      id?: string;
      causeVariable?: components["schemas"]["Variable"];
      /** @description Ex: Sleep Quality */
      causeVariableName?: string;
      studyCharts?: components["schemas"]["StudyCharts"];
      effectVariable?: components["schemas"]["Variable"];
      /** @description Ex: Overall Mood */
      effectVariableName?: string;
      participantInstructions?: components["schemas"]["ParticipantInstruction"];
      statistics?: components["schemas"]["Correlation"];
      studyCard?: components["schemas"]["Card"];
      studyHtml?: components["schemas"]["StudyHtml"];
      studyImages?: components["schemas"]["StudyImages"];
      studyLinks?: components["schemas"]["StudyLinks"];
      studySharing?: components["schemas"]["StudySharing"];
      studyText?: components["schemas"]["StudyText"];
      studyVotes?: components["schemas"]["StudyVotes"];
      /** @description True if you are sharing your data with this study */
      joined?: boolean;
    };
    /** @description An object with various chart properties each property contain and svg and Highcharts configuration */
    StudyCharts: {
      populationTraitScatterPlot?: components["schemas"]["Chart"];
      outcomeDistributionColumnChart?: components["schemas"]["Chart"];
      predictorDistributionColumnChart?: components["schemas"]["Chart"];
      correlationScatterPlot?: components["schemas"]["Chart"];
      pairsOverTimeLineChart?: components["schemas"]["Chart"];
    };
    StudyCreationBody: {
      /** @description Name of predictor variable */
      causeVariableName: string;
      /** @description Name of the outcome variable */
      effectVariableName: string;
      /** @description Title of your study (optional) */
      studyTitle?: string;
      /**
       * @description Individual studies are based on data of a single user. Group studies are based on data from a specific group of individuals who have joined.  Global studies are based on aggregated and anonymously shared data from all users.
       * @enum {string}
       */
      type: "individual" | "group" | "global";
    };
    StudyHtml: {
      /** @description Embeddable chart html */
      chartHtml: string;
      /** @description Play Store, App Store, Chrome Web Store */
      downloadButtonsHtml?: string;
      /** @description Embeddable study including HTML head section charts.  Modifiable css classes are study-title, study-section-header, study-section-body */
      fullPageWithHead?: string;
      /** @description Embeddable study text html including charts.  Modifiable css classes are study-title, study-section-header, study-section-body */
      fullStudyHtml: string;
      /** @description Embeddable study html including charts and css styling */
      fullStudyHtmlWithCssStyles?: string;
      /** @description Instructions for study participation */
      participantInstructionsHtml?: string;
      /** @description Embeddable table with statistics */
      statisticsTableHtml?: string;
      /** @description Text summary */
      studyAbstractHtml?: string;
      /** @description Title, study image, abstract with CSS styling */
      studyHeaderHtml?: string;
      /** @description PNG image */
      studyImageHtml?: string;
      /** @description Facebook, Twitter, Google+ */
      studyMetaHtml?: string;
      /** @description Formatted study text sections */
      studyTextHtml?: string;
      socialSharingButtonHtml?: string;
      studySummaryBoxHtml?: string;
    };
    StudyImages: {
      /** @description Ex: https://static.quantimo.do/img/variable_categories/sleeping_in_bed-96.png */
      causeVariableImageUrl?: string;
      /** @description Ex: ion-ios-cloudy-night-outline */
      causeVariableIonIcon?: string;
      /** @description Ex: https://static.quantimo.do/img/variable_categories/theatre_mask-96.png */
      effectVariableImageUrl?: string;
      /** @description Ex: ion-happy-outline */
      effectVariableIonIcon?: string;
      /** @description Ex: https://s3.amazonaws.com/curedao-docs/images/gauge-moderately-positive-relationship.png */
      gaugeImage: string;
      /** @description Ex: https://s3.amazonaws.com/curedao-docs/images/gauge-moderately-positive-relationship-200-200.png */
      gaugeImageSquare: string;
      /** @description Image with gauge and category images */
      gaugeSharingImageUrl?: string;
      /** @description Ex: https://s3-us-west-1.amazonaws.com/qmimages/variable_categories_gauges_logo_background/gauge-moderately-positive-relationship_sleep_emotions_logo_background.png */
      imageUrl: string;
      /** @description Image with robot and category images */
      robotSharingImageUrl?: string;
      /** @description Avatar of the principal investigator */
      avatar?: string;
    };
    StudyJoinResponse: {
      study?: components["schemas"]["Study"];
      trackingReminders?: components["schemas"]["TrackingReminder"][];
      trackingReminderNotifications?: components["schemas"]["TrackingReminderNotification"][];
      /** @description Can be used as body of help info popup */
      description?: string;
      /** @description Can be used as title in help info popup */
      summary?: string;
      /** @description Array of error objects with message property */
      errors?: components["schemas"]["ErrorResponse"][];
      /** @description ex. OK or ERROR */
      status?: string;
      /** @description true or false */
      success?: boolean;
      /** @description Response code such as 200 */
      code?: number;
      /** @description A super neat url you might want to share with your users! */
      link?: string;
      card?: components["schemas"]["Card"];
    };
    StudyLinks: {
      /** @description Share this link with potential study participants */
      studyJoinLink?: string;
      /** @description Ex: mailto:?subject=N1%20Study%3A%20Sleep%20Quality%20Predicts%20Higher%20Overall%20Mood&body=Check%20out%20my%20study%20at%20https%3A%2F%2Flocal.quantimo.do%2Fapi%2Fv2%2Fstudy%3FcauseVariableName%3DSleep%2520Quality%26effectVariableName%3DOverall%2520Mood%26userId%3D230%0A%0AHave%20a%20great%20day! */
      studyLinkEmail: string;
      /** @description Ex: https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Flocal.quantimo.do%2Fapi%2Fv2%2Fstudy%3FcauseVariableName%3DSleep%2520Quality%26effectVariableName%3DOverall%2520Mood%26userId%3D230 */
      studyLinkFacebook: string;
      /** @description Ex: https://plus.google.com/share?url=https%3A%2F%2Flocal.quantimo.do%2Fapi%2Fv2%2Fstudy%3FcauseVariableName%3DSleep%2520Quality%26effectVariableName%3DOverall%2520Mood%26userId%3D230 */
      studyLinkGoogle: string;
      /** @description Ex: https://local.quantimo.do/api/v2/study?causeVariableName=Sleep%20Quality&effectVariableName=Overall%20Mood&userId=230 */
      studyLinkStatic: string;
      /** @description Ex: https://local.quantimo.do/ionic/Modo/www/index.html#/app/study?causeVariableName=Sleep%20Quality&effectVariableName=Overall%20Mood&userId=230 */
      studyLinkDynamic: string;
      /** @description Ex: https://twitter.com/home?status=Sleep%20Quality%20Predicts%20Higher%20Overall%20Mood%20https%3A%2F%2Flocal.quantimo.do%2Fapi%2Fv2%2Fstudy%3FcauseVariableName%3DSleep%2520Quality%26effectVariableName%3DOverall%2520Mood%26userId%3D230%20%40curedao */
      studyLinkTwitter: string;
    };
    StudySharing: {
      /** @description Would you like to make this study publicly visible? */
      shareUserMeasurements: boolean;
      /** @description Ex: N1 Study: Sleep Quality Predicts Higher Overall Mood */
      sharingDescription: string;
      /** @description Ex: N1 Study: Sleep Quality Predicts Higher Overall Mood */
      sharingTitle: string;
    };
    StudyText: {
      /** @description Ex: Overall Mood is 3.55/5 (15% higher) on average after days with around 4.19/5 Sleep Quality */
      averageEffectFollowingHighCauseExplanation?: string;
      /** @description Ex: Overall Mood is 2.65/5 (14% lower) on average after days with around 1.97/5 Sleep Quality */
      averageEffectFollowingLowCauseExplanation?: string;
      /** @description Ex: Overall Mood, on average, 17% higher after around 4.14/5 Sleep Quality */
      valuePredictingHighOutcomeExplanation?: string;
      /** @description Ex: Overall Mood, on average, 11% lower after around 3.03/5 Sleep Quality */
      valuePredictingLowOutcomeExplanation?: string;
      /** @description Ex: It was assumed that 0 hours would pass before a change in Very Distracting Time would produce an observable change in Video Activities.  It was assumed that Very Distracting Time could produce an observable change in Video Activities for as much as 7 days after the stimulus event. */
      dataAnalysis?: string;
      /** @description Ex: Very Distracting Time data was primarily collected using <a href="https://www.rescuetime.com/rp/curedao/plans">RescueTime</a>. Detailed reports show which applications and websites you spent time on. Activities are automatically grouped into pre-defined categories with built-in productivity scores covering thousands of websites and applications. You can customize categories and productivity scores to meet your needs.<br>Video Activities data was primarily collected using <a href="https://www.rescuetime.com/rp/curedao/plans">RescueTime</a>. Detailed reports show which applications and websites you spent time on. Activities are automatically grouped into pre-defined categories with built-in productivity scores covering thousands of websites and applications. You can customize categories and productivity scores to meet your needs. */
      dataSources?: string;
      /** @description Ex: Very Distracting Time data was primarily collected using <a href="https://www.rescuetime.com/rp/curedao/plans">RescueTime</a>. Detailed reports show which applications and websites you spent time on. Activities are automatically grouped into pre-defined categories with built-in productivity scores covering thousands of websites and applications. You can customize categories and productivity scores to meet your needs.<br>Video Activities data was primarily collected using <a href="https://www.rescuetime.com/rp/curedao/plans">RescueTime</a>. Detailed reports show which applications and websites you spent time on. Activities are automatically grouped into pre-defined categories with built-in productivity scores covering thousands of websites and applications. You can customize categories and productivity scores to meet your needs. */
      dataSourcesParagraphForCause?: string;
      /** @description Ex: Very Distracting Time data was primarily collected using <a href="https://www.rescuetime.com/rp/curedao/plans">RescueTime</a>. Detailed reports show which applications and websites you spent time on. Activities are automatically grouped into pre-defined categories with built-in productivity scores covering thousands of websites and applications. You can customize categories and productivity scores to meet your needs.<br>Video Activities data was primarily collected using <a href="https://www.rescuetime.com/rp/curedao/plans">RescueTime</a>. Detailed reports show which applications and websites you spent time on. Activities are automatically grouped into pre-defined categories with built-in productivity scores covering thousands of websites and applications. You can customize categories and productivity scores to meet your needs. */
      dataSourcesParagraphForEffect?: string;
      /** @description Ex: Sleep Quality Predicts Higher Overall Mood */
      lastCauseDailyValueSentenceExtended?: string;
      /** @description Ex: Sleep Quality Predicts Higher Overall Mood */
      lastCauseAndOptimalValueSentence?: string;
      /** @description Ex: Sleep Quality Predicts Higher Overall Mood */
      lastCauseDailyValueSentence?: string;
      /** @description Ex: Sleep Quality Predicts Higher Overall Mood */
      optimalDailyValueSentence?: string;
      /** @description Instructions for study participation */
      participantInstructions?: string;
      /** @description Ex: Sleep Quality Predicts Higher Overall Mood */
      predictorExplanation?: string;
      /** @description Ex: Using a two-tailed t-test with alpha = 0.05, it was determined that the change in Video Activities is statistically significant at 95% confidence interval. */
      significanceExplanation?: string;
      /** @description Ex: Aggregated data from 21 suggests with a low degree of confidence (p=0.097) that Very Distracting Time has a moderately positive predictive relationship (R=0.354) with Video Activities  (Activity).  The highest quartile of Video Activities measurements were observed following an average 2.03h Very Distracting Timeper day.  The lowest quartile of Video Activities  measurements were observed following an average 1.04h Very Distracting Timeper day. */
      studyAbstract: string;
      /** @description Ex: This study is based on data donated by  21 CureDAO users. Thus, the study design is equivalent to the aggregation of 21 separate n=1 observational natural experiments. */
      studyDesign: string;
      /**
       * @description Ex: As with any human experiment, it was impossible to control for all potentially confounding variables.
       *             Correlation does not necessarily imply correlation.  We can never know for sure if one factor is definitely the cause of an outcome.
       *             However, lack of correlation definitely implies the lack of a causal relationship.  Hence, we can with great
       *             confidence rule out non-existent relationships. For instance, if we discover no relationship between mood
       *             and an antidepressant this information is just as or even more valuable than the discovery that there is a relationship.
       *             <br>
       *             <br>
       *             We can also take advantage of several characteristics of time series data from many subjects  to infer the likelihood of a causal relationship if we do find a correlational relationship.
       *             The criteria for causation are a group of minimal conditions necessary to provide adequate evidence of a causal relationship between an incidence and a possible consequence.
       *             The list of the criteria is as follows:
       *             <br>
       *             1. Strength (effect size): A small association does not mean that there is not a causal effect, though the larger the association, the more likely that it is causal.
       *             <br>
       *             2. Consistency (reproducibility): Consistent findings observed by different persons in different places with different samples strengthens the likelihood of an effect.
       *             <br>
       *             3. Specificity: Causation is likely if a very specific population at a specific site and disease with no other likely explanation. The more specific an association between a factor and an effect is, the bigger the probability of a causal relationship.
       *             <br>
       *             4. Temporality: The effect has to occur after the cause (and if there is an expected delay between the cause and expected effect, then the effect must occur after that delay).
       *             <br>
       *             5. Biological gradient: Greater exposure should generally lead to greater incidence of the effect. However, in some cases, the mere presence of the factor can trigger the effect. In other cases, an inverse proportion is observed: greater exposure leads to lower incidence.
       *             <br>
       *             6. Plausibility: A plausible mechanism between cause and effect is helpful.
       *             <br>
       *             7. Coherence: Coherence between epidemiological and laboratory findings increases the likelihood of an effect.
       *             <br>
       *             8. Experiment: "Occasionally it is possible to appeal to experimental evidence".
       *             <br>
       *             9. Analogy: The effect of similar factors may be considered.
       *             <br>
       *             <br>
       *              The confidence in a causal relationship is bolstered by the fact that time-precedence was taken into account in all calculations. Furthermore, in accordance with the law of large numbers (LLN), the predictive power and accuracy of these results will continually grow over time.  146 paired data points were used in this analysis.   Assuming that the relationship is merely coincidental, as the participant independently modifies their Very Distracting Time values, the observed strength of the relationship will decline until it is below the threshold of significance.  To it another way, in the case that we do find a spurious correlation, suggesting that banana intake improves mood for instance,
       *             one will likely increase their banana intake.  Due to the fact that this correlation is spurious, it is unlikely
       *             that you will see a continued and persistent corresponding increase in mood.  So over time, the spurious correlation will
       *             naturally dissipate.Furthermore, it will be very enlightening to aggregate this data with the data from other participants  with similar genetic, diseasomic, environmentomic, and demographic profiles.
       */
      studyLimitations: string;
      /** @description Ex: The objective of this study is to determine the nature of the relationship (if any) between the Very Distracting Time and the Video Activities. Additionally, we attempt to determine the Very Distracting Time values most likely to produce optimal Video Activities values. */
      studyObjective: string;
      /** @description Ex: This analysis suggests that higher Very Distracting Time generally predicts negative Video Activities (p = 0.097). Video Activities is, on average, 36%  higher after around 2.03 Very Distracting Time.  After an onset delay of 168 hours, Video Activities is, on average, 16%  lower than its average over the 168 hours following around 1.04 Very Distracting Time.  146 data points were used in this analysis.  The value for Very Distracting Time changed 2984 times, effectively running 1492 separate natural experiments. The top quartile outcome values are preceded by an average 2.03 h of Very Distracting Time.  The bottom quartile outcome values are preceded by an average 1.04 h of Very Distracting Time.  Forward Pearson User Variable Relationship Coefficient was 0.354 (p=0.097, 95% CI -0.437 to 1.144 onset delay = 0 hours, duration of action = 168 hours) .  The Reverse Pearson User Variable Relationship Coefficient was 0.208 (P=0.097, 95% CI -0.583 to 0.998, onset delay = -0 hours, duration of action = -168 hours). When the Very Distracting Time value is closer to 2.03 h than 1.04 h, the Video Activities value which follows is, on average, 36% percent higher than its typical value.  When the Very Distracting Time value is closer to 1.04 h than 2.03 h, the Video Activities value which follows is 0% lower than its typical value.  Video Activities is 5 h (67% higher) on average after days with around 5 h Very Distracting Time */
      studyResults: string;
      /** @description Ex: N1 Study: Very Distracting Time Predicts Negative Video Activities */
      studyTitle: string;
      /** @description Help us determine if Remeron affects Overall Mood! */
      studyInvitation?: string;
      /** @description Does Remeron affect Overall Mood? */
      studyQuestion?: string;
      /** @description In order to reduce suffering through the advancement of human knowledge... */
      studyBackground?: string;
    };
    StudyVotes: {
      /** @description Average of all user votes with 1 representing an up-vote and 0 representing a down-vote. Ex: 0.9855 */
      averageVote: number;
      /** @description 1 if the current user has up-voted the study and 0 if they down-voted it. Null means no vote. Ex: 1 or 0 or null */
      userVote: number;
    };
    TrackingReminder: {
      actionArray?: components["schemas"]["TrackingReminderNotificationAction"][];
      availableUnits?: components["schemas"]["Unit"][];
      /** @description Link to study comparing variable with strongest relationship for user or population */
      bestStudyLink?: string;
      bestStudyCard?: components["schemas"]["Card"];
      /** @description Link to study comparing variable with strongest relationship for user */
      bestUserStudyLink?: string;
      bestUserStudyCard?: components["schemas"]["Card"];
      /** @description Link to study comparing variable with strongest relationship for population */
      bestPopulationStudyLink?: string;
      bestPopulationStudyCard?: components["schemas"]["Card"];
      /** @description Description of relationship with variable with strongest relationship for user or population */
      optimalValueMessage?: string;
      /** @description Description of relationship with variable with strongest relationship for population */
      commonOptimalValueMessage?: string;
      /** @description Description of relationship with variable with strongest relationship for user */
      userOptimalValueMessage?: string;
      card?: components["schemas"]["Card"];
      /** @description Your client id can be obtained by creating an app at https://builder.quantimo.do */
      clientId?: string;
      /**
       * @description The way multiple measurements are aggregated over time
       * @enum {string}
       */
      combinationOperation?: "MEAN" | "SUM";
      /** @description Ex: 2016-05-18 02:24:08 UTC ISO 8601 YYYY-MM-DDThh:mm:ss */
      createdAt?: string;
      /** @description Ex: Trader Joe's Bedtime Tea */
      displayName?: string;
      /** @description Ex: /5 */
      unitAbbreviatedName: string;
      /** @description Ex: 5 */
      unitCategoryId?: number;
      /** @description Ex: Rating */
      unitCategoryName?: string;
      /** @description Ex: 10 */
      unitId?: number;
      /** @description Ex: 1 to 5 Rating */
      unitName?: string;
      /**
       * Format: float
       * @description Default value to use for the measurement when tracking. Unit: User-specified or common.
       */
      defaultValue?: number;
      /** @description If a tracking reminder is enabled, tracking reminder notifications will be generated for this variable. */
      enabled?: boolean;
      /** @description True if the reminders should be delivered via email */
      email?: boolean;
      /** @description Ex: reminderStartTimeLocal is less than $user->earliestReminderTime or greater than  $user->latestReminderTime */
      errorMessage?: string;
      /** @description Ex: 0. Unit: User-specified or common. */
      fillingValue?: number;
      /** @description Ex: 02:45:20 in UTC timezone */
      firstDailyReminderTime?: string;
      /** @description Ex: Daily */
      frequencyTextDescription?: string;
      /** @description Ex: Daily at 09:45 PM */
      frequencyTextDescriptionWithTime?: string;
      /**
       * Format: int32
       * @description id
       */
      id?: number;
      /** @description Ex: saddestFaceIsFive */
      inputType?: string;
      /** @description Ex: I am an instruction! */
      instructions?: string;
      /** @description Ex: ion-sad-outline */
      ionIcon?: string;
      /** @description UTC ISO 8601 YYYY-MM-DDThh:mm:ss timestamp for the last time a measurement was received for this user and variable */
      lastTracked?: string;
      /**
       * Format: double
       * @description Ex: 2
       */
      lastValue?: number;
      /** @description UTC ISO 8601 YYYY-MM-DDThh:mm:ss  timestamp for the reminder time of the latest tracking reminder notification that has been pre-emptively generated in the database */
      latestTrackingReminderNotificationReminderTime?: string;
      localDailyReminderNotificationTimes?: string[];
      localDailyReminderNotificationTimesForAllReminders?: string[];
      /** @description Ex: 1 */
      manualTracking?: boolean;
      /**
       * Format: double
       * @description Ex: 5. Unit: User-specified or common.
       */
      maximumAllowedValue?: number;
      /**
       * Format: double
       * @description Ex: 1. Unit: User-specified or common.
       */
      minimumAllowedValue?: number;
      /** @description Ex: 1501555520 */
      nextReminderTimeEpochSeconds?: number;
      /** @description True if the reminders should appear in the notification bar */
      notificationBar?: boolean;
      /** @description Ex: 445 */
      numberOfRawMeasurements?: number;
      /** @description Ex: 1 */
      numberOfUniqueValues?: number;
      /** @description Indicates whether the variable is usually an outcome of interest such as a symptom or emotion */
      outcome?: boolean;
      /** @description Ex: img/variable_categories/symptoms.png */
      pngPath?: string;
      /** @description Ex: https://safe.fdai.earth/img/variable_categories/symptoms.png */
      pngUrl?: string;
      /** @description Link to associated product for purchase */
      productUrl?: string;
      /** @description True if the reminders should appear as a popup notification */
      popUp?: boolean;
      /** @description Ex: How is your overall mood? */
      question?: string;
      /** @description Ex: How is your overall mood on a scale of 1 to 5?? */
      longQuestion?: string;
      /** @description Latest time of day at which reminders should appear in UTC HH:MM:SS format */
      reminderEndTime?: string;
      /**
       * Format: int32
       * @description Number of seconds between one reminder and the next
       */
      reminderFrequency: number;
      /** @description String identifier for the sound to accompany the reminder */
      reminderSound?: string;
      /** @description Ex: 1469760320 */
      reminderStartEpochSeconds?: number;
      /** @description Earliest time of day at which reminders should appear in UTC HH:MM:SS format */
      reminderStartTime?: string;
      /**
       * Format: string
       * @description Ex: 21:45:20
       */
      reminderStartTimeLocal?: string;
      /** @description Ex: 09:45 PM */
      reminderStartTimeLocalHumanFormatted?: string;
      /** @description Ex: true */
      repeating?: boolean;
      /** @description Ex: 01:00:00 */
      secondDailyReminderTime?: string;
      /**
       * Format: double
       * @description Ex: 1. Unit: User-specified or common.
       */
      secondToLastValue?: number;
      /** @description True if the reminders should be delivered via SMS */
      sms?: boolean;
      /**
       * Format: string
       * @description Earliest date on which the user should be reminded to track in YYYY-MM-DD format
       */
      startTrackingDate?: string;
      /**
       * Format: string
       * @description Latest date on which the user should be reminded to track in YYYY-MM-DD format
       */
      stopTrackingDate?: string;
      /** @description Ex: https://safe.fdai.earth/img/variable_categories/symptoms.svg */
      svgUrl?: string;
      /** @description Ex: 20:00:00 */
      thirdDailyReminderTime?: string;
      /**
       * Format: double
       * @description Ex: 3
       */
      thirdToLastValue?: number;
      /** @description Ex: 11841 */
      trackingReminderId?: number;
      /** @description Ex: Not Found */
      trackingReminderImageUrl?: string;
      /** @description UPC or other barcode scan result */
      upc?: string;
      /** @description When the record in the database was last updated. Use UTC ISO 8601 YYYY-MM-DDThh:mm:ss  datetime format. Time zone should be UTC and not local. */
      updatedAt?: string;
      /**
       * Format: int32
       * @description ID of User
       */
      userId?: number;
      /** @description Ex: /5 */
      userVariableUnitAbbreviatedName?: string;
      /** @description Ex: 5 */
      userVariableUnitCategoryId?: number;
      /** @description Ex: Rating */
      userVariableUnitCategoryName?: string;
      /** @description Ex: 10 */
      userVariableUnitId?: number;
      /** @description Ex: 1 to 5 Rating */
      userVariableUnitName?: string;
      /** @description Ex: 10 */
      userVariableVariableCategoryId?: number;
      /** @description Ex: Symptoms */
      userVariableVariableCategoryName?: string;
      /** @description Valence indicates what type of buttons should be used when recording measurements for this variable. positive - Face buttons with the happiest face equating to a 5/5 rating where higher is better like Overall Mood. negative - Face buttons with the happiest face equating to a 1/5 rating where lower is better like Headache Severity. numeric - Just 1 to 5 numeric buttons for neutral variables. */
      valence?: string;
      /** @description Ex: Rate daily */
      valueAndFrequencyTextDescription?: string;
      /** @description Ex: Rate daily at 09:45 PM */
      valueAndFrequencyTextDescriptionWithTime?: string;
      /** @description Ex: 10 */
      variableCategoryId?: number;
      /** @description Ex: https://static.quantimo.do/img/variable_categories/sad-96.png */
      variableCategoryImageUrl?: string;
      /**
       * @description Ex: Emotions, Treatments, Symptoms...
       * @enum {string}
       */
      variableCategoryName: "Activity" | "Books" | "Causes of Illness" | "Cognitive Performance" | "Conditions" | "Emotions" | "Environment" | "Foods" | "Goals" | "Locations" | "Miscellaneous" | "Movies and TV" | "Music" | "Nutrients" | "Payments" | "Physical Activities" | "Physique" | "Sleep" | "Social Interactions" | "Software" | "Symptoms" | "Treatments" | "Vital Signs";
      /** @description Valence indicates what type of buttons should be used when recording measurements for this variable. positive - Face buttons with the happiest face equating to a 5/5 rating where higher is better like Overall Mood. negative - Face buttons with the happiest face equating to a 1/5 rating where lower is better like Headache Severity. numeric - Just 1 to 5 numeric buttons for neutral variables. */
      variableDescription?: string;
      /**
       * Format: int32
       * @description Id for the variable to be tracked
       */
      variableId?: number;
      /** @description Name of the variable to be used when sending measurements */
      variableName: string;
    };
    TrackingReminderNotification: {
      actionArray: components["schemas"]["TrackingReminderNotificationAction"][];
      availableUnits: components["schemas"]["Unit"][];
      /** @description Link to study comparing variable with strongest relationship for user or population */
      bestStudyLink?: string;
      bestStudyCard?: components["schemas"]["Card"];
      /** @description Link to study comparing variable with strongest relationship for user */
      bestUserStudyLink?: string;
      bestUserStudyCard?: components["schemas"]["Card"];
      /** @description Link to study comparing variable with strongest relationship for population */
      bestPopulationStudyLink?: string;
      bestPopulationStudyCard?: components["schemas"]["Card"];
      /** @description Description of relationship with variable with strongest relationship for user or population */
      optimalValueMessage?: string;
      /** @description Description of relationship with variable with strongest relationship for population */
      commonOptimalValueMessage?: string;
      /** @description Description of relationship with variable with strongest relationship for user */
      userOptimalValueMessage?: string;
      card?: components["schemas"]["Card"];
      /** @description Your client id can be obtained by creating an app at https://builder.quantimo.do */
      clientId?: string;
      /**
       * @description The way multiple measurements are aggregated over time
       * @enum {string}
       */
      combinationOperation?: "MEAN" | "SUM";
      /** @description Ex: 2017-07-29 20:49:54 UTC ISO 8601 YYYY-MM-DDThh:mm:ss */
      createdAt?: string;
      /** @description Ex: Trader Joe's Bedtime Tea */
      displayName?: string;
      /**
       * Format: double
       * @description Is the user specified default value or falls back to the last value in user unit. Good for initializing input fields. Unit: User-specified or common.
       */
      modifiedValue?: number;
      /** @description Ex: /5 */
      unitAbbreviatedName?: string;
      /** @description Ex: 5 */
      unitCategoryId?: number;
      /** @description Ex: Rating */
      unitCategoryName?: string;
      /** @description Ex: 10 */
      unitId?: number;
      /** @description Ex: 1 to 5 Rating */
      unitName?: string;
      /**
       * Format: float
       * @description Default value to use for the measurement when tracking
       */
      defaultValue?: number;
      /** @description Valence indicates what type of buttons should be used when recording measurements for this variable. positive - Face buttons with the happiest face equating to a 5/5 rating where higher is better like Overall Mood. negative - Face buttons with the happiest face equating to a 1/5 rating where lower is better like Headache Severity. numeric - Just 1 to 5 numeric buttons for neutral variables. */
      description?: string;
      /** @description True if the reminders should be delivered via email */
      email?: boolean;
      /** @description Ex: 0 */
      fillingValue: number;
      /** @description Ex: ion-sad-outline */
      iconIcon?: string;
      /**
       * Format: int32
       * @description id for the specific PENDING tracking remidner
       */
      id: number;
      /** @description Ex: https://rximage.nlm.nih.gov/image/images/gallery/original/55111-0129-60_RXNAVIMAGE10_B051D81E.jpg */
      imageUrl?: string;
      /** @description Ex: happiestFaceIsFive */
      inputType?: string;
      /** @description Ex: ion-happy-outline */
      ionIcon?: string;
      /**
       * Format: double
       * @description Ex: 3
       */
      lastValue?: number;
      /** @description True if this variable is normally tracked via manual user input rather than automatic imports */
      manualTracking?: boolean;
      /** @description Ex: 5 */
      maximumAllowedValue?: number;
      /** @description Ex: 1 */
      minimumAllowedValue?: number;
      /**
       * Format: double
       * @description Ex: 3
       */
      mostCommonValue?: number;
      /** @description True if the reminders should appear in the notification bar */
      notificationBar?: boolean;
      /** @description Ex: UTC ISO 8601 YYYY-MM-DDThh:mm:ss */
      notifiedAt?: string;
      /** @description Ex: 5 */
      numberOfUniqueValues?: number;
      /** @description Indicates whether the variable is usually an outcome of interest such as a symptom or emotion */
      outcome?: boolean;
      /** @description Ex: img/variable_categories/emotions.png */
      pngPath?: string;
      /** @description Ex: https://safe.fdai.earth/img/variable_categories/emotions.png */
      pngUrl?: string;
      /** @description True if the reminders should appear as a popup notification */
      popUp?: boolean;
      /** @description Link to associated product for purchase */
      productUrl?: string;
      /** @description Ex: How is your overall mood? */
      question?: string;
      /** @description Ex: How is your overall mood on a scale of 1 to 5?? */
      longQuestion?: string;
      /** @description Ex: 01-01-2018 */
      reminderEndTime?: string;
      /** @description How often user should be reminded in seconds. Ex: 86400 */
      reminderFrequency?: number;
      /** @description String identifier for the sound to accompany the reminder */
      reminderSound?: string;
      /** @description Earliest time of day at which reminders should appear in UTC HH:MM:SS format */
      reminderStartTime?: string;
      /** @description UTC ISO 8601 YYYY-MM-DDThh:mm:ss timestamp for the specific time the variable should be tracked in UTC.  This will be used for the measurement startTime if the track endpoint is used. */
      reminderTime?: string;
      /**
       * Format: double
       * @description Ex: 4
       */
      secondMostCommonValue?: number;
      /**
       * Format: double
       * @description Ex: 1
       */
      secondToLastValue?: number;
      /** @description True if the reminders should be delivered via SMS */
      sms?: boolean;
      /** @description Ex: https://safe.fdai.earth/img/variable_categories/emotions.svg */
      svgUrl?: string;
      /**
       * Format: double
       * @description Ex: 2
       */
      thirdMostCommonValue?: number;
      /**
       * Format: double
       * @description Ex: 2
       */
      thirdToLastValue?: number;
      /** @description Ex: Rate Overall Mood */
      title?: string;
      /**
       * Format: double
       * @description Ex: 3
       */
      total?: number;
      trackAllActions: components["schemas"]["TrackingReminderNotificationTrackAllAction"][];
      /**
       * Format: int32
       * @description id for the repeating tracking remidner
       */
      trackingReminderId?: number;
      /** @description Ex: https://rximage.nlm.nih.gov/image/images/gallery/original/55111-0129-60_RXNAVIMAGE10_B051D81E.jpg */
      trackingReminderImageUrl?: string;
      /** @description Ex: 5072482 */
      trackingReminderNotificationId?: number;
      /** @description UTC ISO 8601 YYYY-MM-DDThh:mm:ss timestamp for the specific time the variable should be tracked in UTC.  This will be used for the measurement startTime if the track endpoint is used. */
      trackingReminderNotificationTime?: string;
      /** @description Ex: 1501534124 */
      trackingReminderNotificationTimeEpoch?: number;
      /** @description Ex: 15:48:44 */
      trackingReminderNotificationTimeLocal?: string;
      /** @description Ex: 8PM Sun, May 1 */
      trackingReminderNotificationTimeLocalHumanString?: string;
      /** @description When the record in the database was last updated. Use UTC ISO 8601 YYYY-MM-DDThh:mm:ss  datetime format. Time zone should be UTC and not local. */
      updatedAt?: string;
      /**
       * Format: int32
       * @description ID of User
       */
      userId?: number;
      /** @description Ex: /5 */
      userVariableUnitAbbreviatedName?: string;
      /** @description Ex: 5 */
      userVariableUnitCategoryId?: number;
      /** @description Ex: Rating */
      userVariableUnitCategoryName?: string;
      /** @description Ex: 10 */
      userVariableUnitId?: number;
      /** @description Ex: 1 to 5 Rating */
      userVariableUnitName?: string;
      /** @description Ex: 1 */
      userVariableVariableCategoryId?: number;
      /** @description Ex: Emotions */
      userVariableVariableCategoryName?: string;
      /** @description Valence indicates what type of buttons should be used when recording measurements for this variable. positive - Face buttons with the happiest face equating to a 5/5 rating where higher is better like Overall Mood. negative - Face buttons with the happiest face equating to a 1/5 rating where lower is better like Headache Severity. numeric - Just 1 to 5 numeric buttons for neutral variables. */
      valence?: string;
      /** @description Ex: 1 */
      variableCategoryId?: number;
      /** @description Ex: https://static.quantimo.do/img/variable_categories/theatre_mask-96.png */
      variableCategoryImageUrl?: string;
      /**
       * @description Ex: Emotions, Treatments, Symptoms...
       * @enum {string}
       */
      variableCategoryName?: "Activity" | "Books" | "Causes of Illness" | "Cognitive Performance" | "Conditions" | "Emotions" | "Environment" | "Foods" | "Goals" | "Locations" | "Miscellaneous" | "Movies and TV" | "Music" | "Nutrients" | "Payments" | "Physical Activities" | "Physique" | "Sleep" | "Social Interactions" | "Software" | "Symptoms" | "Treatments" | "Vital Signs";
      /**
       * Format: int32
       * @description Id for the variable to be tracked
       */
      variableId?: number;
      /** @description Ex: https://image.png */
      variableImageUrl?: string;
      /** @description Name of the variable to be used when sending measurements */
      variableName?: string;
    };
    TrackingReminderNotificationAction: {
      /** @description Ex: track */
      action: string;
      /** @description Ex: trackThreeRatingAction */
      callback: string;
      /** @description Ex: 3 */
      modifiedValue: number;
      /** @description Ex: 3/5 */
      title: string;
      /** @description Ex: Rate 3/5 */
      longTitle?: string;
      /** @description Ex: 3 */
      shortTitle?: string;
    };
    TrackingReminderNotificationPost: {
      /**
       * @description track records a measurement for the notification.  snooze changes the notification to 1 hour from now. skip deletes the notification.
       * @enum {string}
       */
      action: "skip" | "snooze" | "track";
      /** @description Id of the TrackingReminderNotification */
      id: number;
      /** @description Optional value to be recorded instead of the tracking reminder default value */
      modifiedValue?: number;
    };
    TrackingReminderNotificationTrackAllAction: {
      /** @description Ex: trackAll */
      action: string;
      /** @description Ex: trackThreeRatingAction */
      callback: string;
      /** @description Ex: 3 */
      modifiedValue: number;
      /** @description Ex: Rate 3/5 for all */
      title: string;
    };
    Unit: {
      /** @description Unit abbreviation */
      abbreviatedName: string;
      /** @description Ex: 1 */
      advanced?: number;
      /**
       * @description Unit category
       * @enum {string}
       */
      category: "Distance" | "Duration" | "Energy" | "Frequency" | "Miscellany" | "Pressure" | "Proportion" | "Rating" | "Temperature" | "Volume" | "Weight" | "Count";
      /** @description Ex: 6 */
      categoryId?: number;
      /** @description Ex: Miscellany */
      categoryName?: string;
      /** @description Conversion steps list */
      conversionSteps: components["schemas"]["ConversionStep"][];
      /** @description Ex: 29 */
      id?: number;
      /** @description Ex: https://static.quantimo.do/img/medical/png/pill.png */
      image?: string;
      /** @description Ex: 0 */
      manualTracking?: number;
      /**
       * Format: double
       * @description The maximum allowed value for measurements. While you can record a value above this maximum, it will be excluded from the correlation analysis.
       */
      maximumAllowedValue?: number;
      /** @description Ex: 4 */
      maximumValue: number;
      /**
       * Format: double
       * @description The minimum allowed value for measurements. While you can record a value below this minimum, it will be excluded from the correlation analysis.
       */
      minimumAllowedValue?: number;
      /** @description Ex: 0 */
      minimumValue?: number;
      /** @description Unit name */
      name: string;
      unitCategory: components["schemas"]["UnitCategory"];
    };
    UnitCategory: {
      /** @description id */
      id?: number;
      /** @description Category name */
      name: string;
      /** @description Base unit for in which measurements are to be converted to and stored */
      standardUnitAbbreviatedName?: string;
    };
    User: {
      /** @description User access token */
      accessToken: string;
      /** @description Ex: 2018-08-08 02:41:19 */
      accessTokenExpires?: string;
      /** @description Ex: 1533696079000 */
      accessTokenExpiresAtMilliseconds?: number;
      /** @description Is user administrator */
      administrator: boolean;
      /** @description Ex: https://lh6.googleusercontent.com/-BHr4hyUWqZU/AAAAAAAAAAI/AAAAAAAIG28/2Lv0en738II/photo.jpg?sz=50 */
      avatar?: string;
      /** @description Ex: https://lh6.googleusercontent.com/-BHr4hyUWqZU/AAAAAAAAAAI/AAAAAAAIG28/2Lv0en738II/photo.jpg?sz=50 */
      avatarImage?: string;
      /** @description Ex: a:1:{s:13:"administrator";b:1;} */
      capabilities?: string;
      card?: components["schemas"]["Card"];
      /** @description Ex: curedao */
      clientId?: string;
      /** @description Ex: 118444693184829555362 */
      clientUserId?: string;
      /** @description Ex: 1 */
      combineNotifications?: boolean;
      /** @description When the record was first created. Use UTC ISO 8601 YYYY-MM-DDThh:mm:ss datetime format */
      createdAt?: string;
      /** @description Your bio will be displayed on your published studies */
      description?: string;
      /** @description User display name */
      displayName: string;
      /** @description Earliest time user should get notifications. Ex: 05:00:00 */
      earliestReminderTime?: string;
      /** @description User email */
      email: string;
      /** @description Ex: Mike */
      firstName?: string;
      /** @description Ex: false */
      getPreviewBuilds?: boolean;
      /** @description Ex: false */
      hasAndroidApp?: boolean;
      /** @description Ex: false */
      hasChromeExtension?: boolean;
      /** @description Ex: false */
      hasIosApp?: boolean;
      /** @description User id */
      id: number;
      /** @description Ex: Date the user last logged in */
      lastActive?: string;
      /** @description Ex: 2009 */
      lastFour?: string;
      /** @description Ex: Sinn */
      lastName?: string;
      /** @description Ex: 1 */
      lastSmsTrackingReminderNotificationId?: string;
      /** @description Latest time user should get notifications. Ex: 23:00:00 */
      latestReminderTime?: string;
      /** @description User login name */
      loginName: string;
      /** @description Ex: PASSWORD */
      password?: string;
      /** @description Ex: 618-391-0002 */
      phoneNumber?: string;
      /** @description Ex: 1234 */
      phoneVerificationCode?: string;
      /** @description A good primary outcome variable is something that you want to improve and that changes inexplicably. For instance, if you have anxiety, back pain or arthritis which is worse on some days than others, these would be good candidates for primary outcome variables.  Recording their severity and potential factors will help you identify hidden factors exacerbating or improving them. */
      primaryOutcomeVariableId?: number;
      /** @description A good primary outcome variable is something that you want to improve and that changes inexplicably. For instance, if you have anxiety, back pain or arthritis which is worse on some days than others, these would be good candidates for primary outcome variables.  Recording their severity and potential factors will help you identify hidden factors exacerbating or improving them. */
      primaryOutcomeVariableName?: string;
      /** @description Ex: 1 */
      pushNotificationsEnabled?: boolean;
      /** @description See https://oauth.net/2/grant-types/refresh-token/ */
      refreshToken?: string;
      /** @description Ex: ["admin"] */
      roles?: string;
      /** @description Ex: 1 */
      sendPredictorEmails?: boolean;
      /** @description Ex: 1 */
      sendReminderNotificationEmails?: boolean;
      /** @description Share all studies, charts, and measurement data with all other users */
      shareAllData?: boolean;
      /** @description Ex: false */
      smsNotificationsEnabled?: boolean;
      /** @description Ex: 1 */
      stripeActive?: boolean;
      /** @description Ex: cus_A8CEmcvl8jwLhV */
      stripeId?: string;
      /** @description Ex: monthly7 */
      stripePlan?: string;
      /** @description Ex: sub_ANTx3nOE7nzjQf */
      stripeSubscription?: string;
      /** @description UTC ISO 8601 YYYY-MM-DDThh:mm:ss */
      subscriptionEndsAt?: string;
      /** @description Ex: google */
      subscriptionProvider?: string;
      /** @description Ex: 300 */
      timeZoneOffset?: number;
      /** @description Ex: 1 */
      trackLocation?: boolean;
      /** @description When the record in the database was last updated. Use UTC ISO 8601 YYYY-MM-DDThh:mm:ss datetime format */
      updatedAt?: string;
      /** @description Ex: 2013-12-03 15:25:13 UTC ISO 8601 YYYY-MM-DDThh:mm:ss */
      userRegistered?: string;
      /** @description Ex: https://plus.google.com/+MikeSinn */
      userUrl?: string;
    };
    /** @description The main thing you need here is the clientUserId that will be needed to fetch the user later. */
    UserPostBody: {
      /** @description The user id from your system so you can match the user in our system to the user in your system. */
      clientUserId?: string;
      /** @description Whether to combine notifications for multiple variables into a single notification */
      combineNotifications?: boolean;
      /** @description Your bio will be displayed on your published studies */
      description?: string;
      /** @description User display name */
      displayName?: string;
      /** @description Earliest time user should get notifications. Ex: 05:00:00 */
      earliestReminderTime?: string;
      /** @description User email */
      email?: string;
      /** @description Ex: Mike */
      firstName?: string;
      /** @description Whether the user should get preview builds of their custom app */
      getPreviewBuilds?: boolean;
      /** @description Whether the user has the Android app installed */
      hasAndroidApp?: boolean;
      /** @description Whether the user has the Chrome extension installed */
      hasChromeExtension?: boolean;
      /** @description Whether the user has the iOS app installed */
      hasIosApp?: boolean;
      /** @description Ex: Date the user last logged in */
      lastActive?: string;
      /** @description Ex: Sinn */
      lastName?: string;
      /** @description Latest time user should get notifications. Ex: 23:00:00 */
      latestReminderTime?: string;
      /** @description User login name */
      loginName?: string;
      /** @description Ex: PASSWORD */
      password?: string;
      /** @description Ex: +1-618-555-0002 */
      phoneNumber?: string;
      /** @description Ex: 1234 */
      phoneVerificationCode?: string;
      /** @description A good primary outcome variable is something that you want to improve and that changes inexplicably. For instance, if you have anxiety, back pain or arthritis which is worse on some days than others, these would be good candidates for primary outcome variables.  Recording their severity and potential factors will help you identify hidden factors exacerbating or improving them. */
      primaryOutcomeVariableId?: number;
      /** @description A good primary outcome variable is something that you want to improve and that changes inexplicably. For instance, if you have anxiety, back pain or arthritis which is worse on some days than others, these would be good candidates for primary outcome variables.  Recording their severity and potential factors will help you identify hidden factors exacerbating or improving them. */
      primaryOutcomeVariableName?: string;
      /** @description Whether the user should get push notifications */
      pushNotificationsEnabled?: boolean;
      /** @description Whether the user should get weekly emails on the factors most predictive of their primary outcome to improve */
      sendPredictorEmails?: boolean;
      /** @description Whether the user should get emails when they have tracking reminders */
      sendReminderNotificationEmails?: boolean;
      /** @description Share all studies, charts, and measurement data with all other users */
      shareAllData?: boolean;
      /** @description Whether the user should get SMS notifications */
      smsNotificationsEnabled?: boolean;
      /** @description Minutes offset from UTC time */
      timeZoneOffset?: number;
      /** @description Whether the user wants to automatically track their location with measurements */
      trackLocation?: boolean;
      /** @description The URL the user wants to associate with their account */
      userUrl?: string;
    };
    UsersResponse: {
      users: components["schemas"]["User"][];
      /** @description Users who granted access to their data */
      description?: string;
      /** @description Users who granted access to their data */
      summary?: string;
      /** @description Array of error objects with message property */
      errors?: components["schemas"]["ErrorResponse"][];
      /** @description ex. OK or ERROR */
      status?: string;
      /** @description true or false */
      success?: boolean;
      /** @description Response code such as 200 */
      code?: number;
      image?: components["schemas"]["Image"];
      /** @description Square icon png url */
      avatar?: string;
      /** @description Ex: ion-ios-person */
      ionIcon?: string;
      /** @description Users who granted access to their data */
      html?: string;
      /** @description A super neat url you might want to share with your users! */
      link?: string;
      card?: components["schemas"]["Card"];
    };
    UserTag: {
      /** @description Number by which we multiply the tagged variable value to obtain the tag variable (ingredient) value */
      conversionFactor: number;
      /** @description This is the id of the variable being tagged with an ingredient or something. */
      taggedVariableId: number;
      /** @description This is the id of the ingredient variable whose value is determined based on the value of the tagged variable. */
      tagVariableId: number;
    };
    TagVariable: {
      actionArray?: components["schemas"]["TrackingReminderNotificationAction"][];
      /** @description User-Defined Variable Setting:  Alternative display name */
      alias?: string;
      availableUnits?: components["schemas"]["Unit"][];
      /** @description Link to study comparing variable with strongest relationship for user or population */
      bestStudyLink?: string;
      bestStudyCard?: components["schemas"]["Card"];
      /** @description Link to study comparing variable with strongest relationship for user */
      bestUserStudyLink?: string;
      bestUserStudyCard?: components["schemas"]["Card"];
      /** @description Link to study comparing variable with strongest relationship for population */
      bestPopulationStudyLink?: string;
      bestPopulationStudyCard?: components["schemas"]["Card"];
      /** @description Description of relationship with variable with strongest relationship for user or population */
      optimalValueMessage?: string;
      /** @description Description of relationship with variable with strongest relationship for population */
      commonOptimalValueMessage?: string;
      /** @description Description of relationship with variable with strongest relationship for user */
      userOptimalValueMessage?: string;
      card?: components["schemas"]["Card"];
      /** @description User-Defined Variable Setting: True indicates that this variable is generally a cause in a causal relationship.  An example of a causeOnly variable would be a variable such as Cloud Cover which would generally not be influenced by the behaviour of the user */
      causeOnly?: boolean;
      charts?: components["schemas"]["VariableCharts"];
      /** @description Ex: https://local.quantimo.do/ionic/Modo/www/#/app/charts/Trader%20Joes%20Bedtime%20Tea%20%2F%20Sleepytime%20Tea%20%28any%20Brand%29?variableName=Trader%20Joes%20Bedtime%20Tea%20%2F%20Sleepytime%20Tea%20%28any%20Brand%29&userId=230&pngUrl=https%3A%2F%2Fapi.quantimo.do%2Fionic%2FModo%2Fwww%2Fimg%2Fvariable_categories%2Ftreatments.png */
      chartsLinkDynamic?: string;
      /** @description Ex: mailto:?subject=Check%20out%20my%20Trader%20Joes%20Bedtime%20Tea%20%2F%20Sleepytime%20Tea%20%28any%20Brand%29%20data%21&body=See%20my%20Trader%20Joes%20Bedtime%20Tea%20%2F%20Sleepytime%20Tea%20%28any%20Brand%29%20history%20at%20https%3A%2F%2Flocal.quantimo.do%2Fapi%2Fv2%2Fcharts%3FvariableName%3DTrader%2520Joes%2520Bedtime%2520Tea%2520%252F%2520Sleepytime%2520Tea%2520%2528any%2520Brand%2529%26userId%3D230%26pngUrl%3Dhttps%253A%252F%252Fapi.quantimo.do%252Fionic%252FModo%252Fwww%252Fimg%252Fvariable_categories%252Ftreatments.png%0A%0AHave%20a%20great%20day! */
      chartsLinkEmail?: string;
      /** @description Ex: https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Flocal.quantimo.do%2Fapi%2Fv2%2Fcharts%3FvariableName%3DTrader%2520Joes%2520Bedtime%2520Tea%2520%252F%2520Sleepytime%2520Tea%2520%2528any%2520Brand%2529%26userId%3D230%26pngUrl%3Dhttps%253A%252F%252Fapi.quantimo.do%252Fionic%252FModo%252Fwww%252Fimg%252Fvariable_categories%252Ftreatments.png */
      chartsLinkFacebook?: string;
      /** @description Ex: https://plus.google.com/share?url=https%3A%2F%2Flocal.quantimo.do%2Fapi%2Fv2%2Fcharts%3FvariableName%3DTrader%2520Joes%2520Bedtime%2520Tea%2520%252F%2520Sleepytime%2520Tea%2520%2528any%2520Brand%2529%26userId%3D230%26pngUrl%3Dhttps%253A%252F%252Fapi.quantimo.do%252Fionic%252FModo%252Fwww%252Fimg%252Fvariable_categories%252Ftreatments.png */
      chartsLinkGoogle?: string;
      /** @description Ex: https://local.quantimo.do/api/v2/charts?variableName=Trader%20Joes%20Bedtime%20Tea%20%2F%20Sleepytime%20Tea%20%28any%20Brand%29&userId=230&pngUrl=https%3A%2F%2Fapi.quantimo.do%2Fionic%2FModo%2Fwww%2Fimg%2Fvariable_categories%2Ftreatments.png */
      chartsLinkStatic?: string;
      /** @description Ex: https://twitter.com/home?status=Check%20out%20my%20Trader%20Joes%20Bedtime%20Tea%20%2F%20Sleepytime%20Tea%20%28any%20Brand%29%20data%21%20https%3A%2F%2Flocal.quantimo.do%2Fapi%2Fv2%2Fcharts%3FvariableName%3DTrader%2520Joes%2520Bedtime%2520Tea%2520%252F%2520Sleepytime%2520Tea%2520%2528any%2520Brand%2529%26userId%3D230%26pngUrl%3Dhttps%253A%252F%252Fapi.quantimo.do%252Fionic%252FModo%252Fwww%252Fimg%252Fvariable_categories%252Ftreatments.png%20%40curedao */
      chartsLinkTwitter?: string;
      /** @description Your client id can be obtained by creating an app at https://builder.quantimo.do */
      clientId?: string;
      /**
       * @description User-Defined Variable Setting: How to aggregate measurements over time. SUM should be used for things like minutes of exercise.  If you use MEAN for exercise, then a person might exercise more minutes in one day but add separate measurements that were smaller.  So when we are doing correlational analysis, we would think that the person exercised less that day even though they exercised more.  Conversely, we must use MEAN for things such as ratings which cannot be SUMMED.
       * @enum {string}
       */
      combinationOperation?: "MEAN" | "SUM";
      /** @description Ex: Anxiety / Nervousness */
      commonAlias?: string;
      /** @description When the record was first created. Use UTC ISO 8601 YYYY-MM-DDThh:mm:ss  datetime format */
      createdAt?: string;
      /** @description Comma-separated list of source names to limit variables to those sources */
      dataSourceNames?: string;
      /** @description These are sources of measurements for this variable */
      dataSources?: components["schemas"]["DataSource"][];
      /** @description User-Defined Variable Setting: Ex: Summary to be used in studies. */
      description?: string;
      /** @description Ex: Trader Joe's Bedtime Tea */
      displayName?: string;
      /**
       * Format: int32
       * @description The amount of time over which a predictor/stimulus event can exert an observable influence on an outcome variable value. For instance, aspirin (stimulus/predictor) typically decreases headache severity for approximately four hours (duration of action) following the onset delay. Unit: Seconds
       */
      durationOfAction?: number;
      /**
       * Format: float
       * @description User-Defined Variable Setting: The amount of time over which a predictor/stimulus event can exert an observable influence on an outcome variable value. For instance, aspirin (stimulus/predictor) typically decreases headache severity for approximately four hours (duration of action) following the onset delay.  Unit: Hours
       */
      durationOfActionInHours?: number;
      /**
       * Format: int32
       * @description Earliest filling time
       */
      earliestFillingTime?: number;
      /**
       * Format: int32
       * @description Earliest measurement time
       */
      earliestMeasurementTime?: number;
      /**
       * Format: int32
       * @description Earliest source time
       */
      earliestSourceTime?: number;
      /** @description Error message from last analysis */
      errorMessage?: string;
      /** @description User-Defined Variable Setting: Latest measurement time to be used in analysis. Format: UTC ISO 8601 YYYY-MM-DDThh:mm:ss. */
      experimentEndTime?: string;
      /** @description User-Defined Variable Setting: Earliest measurement time to be used in analysis. Format: UTC ISO 8601 YYYY-MM-DDThh:mm:ss. */
      experimentStartTime?: string;
      /**
       * @description User-Defined Variable Setting: When it comes to analysis to determine the effects of this variable, knowing when it did not occur is as important as knowing when it did occur. For example, if you are tracking a medication, it is important to know when you did not take it, but you do not have to log zero values for all the days when you haven't taken it. Hence, you can specify a filling value (typically 0) to insert whenever data is missing.
       * @enum {string}
       */
      fillingType?: "none" | "zero-filling" | "value-filling";
      /**
       * Format: float
       * @description User-Defined Variable Setting: When it comes to analysis to determine the effects of this variable, knowing when it did not occur is as important as knowing when it did occur. For example, if you are tracking a medication, it is important to know when you did not take it, but you do not have to log zero values for all the days when you haven't taken it. Hence, you can specify a filling value (typically 0) to insert whenever data is missing.  Unit: User-specified or common.
       */
      fillingValue?: number;
      /** @description Ex: ion-sad-outline */
      iconIcon?: string;
      /** @description Ex: 95614 */
      id: number;
      imageUrl?: string;
      /** @description Ex: https://google.com */
      informationalUrl?: string;
      /** @description Type of input field to show for recording measurements */
      inputType?: string;
      ionIcon?: string;
      /**
       * Format: int32
       * @description Duplicate variables. If the variable is joined with some other variable then it is not shown to user in the list of variables
       */
      joinWith?: number;
      /**
       * Format: float
       * @description Kurtosis
       */
      kurtosis?: number;
      /**
       * Format: double
       * @description Calculated Statistic: Ex: 500. Unit: User-specified or common.
       */
      lastProcessedDailyValue?: number;
      /** @description When this variable or its settings were last updated UTC ISO 8601 YYYY-MM-DDThh:mm:ss */
      lastSuccessfulUpdateTime?: string;
      /**
       * Format: float
       * @description Calculated Statistic: Last measurement value in the common unit or user unit if different. Unit: User-specified or common.
       */
      lastValue?: number;
      /**
       * Format: int32
       * @description Latest filling time
       */
      latestFillingTime?: number;
      /**
       * Format: int32
       * @description Latest measurement time. Format: Unix-time epoch seconds.
       */
      latestMeasurementTime?: number;
      /**
       * Format: int32
       * @description Latest source time. Format: Unix-time epoch seconds.
       */
      latestSourceTime?: number;
      /** @description Ex: 1501383600. Format: Unix-time epoch seconds. */
      latestUserMeasurementTime?: number;
      /**
       * Format: float
       * @description Latitude. Unit: User-specified or common.
       */
      latitude?: number;
      /** @description Location */
      location?: string;
      /**
       * Format: float
       * @description Longitude
       */
      longitude?: number;
      /** @description True if the variable is an emotion or symptom rating that is not typically automatically collected by a device or app. */
      manualTracking?: boolean;
      /**
       * Format: float
       * @description User-Defined Variable Setting: The maximum allowed value a daily aggregated measurement. Unit: User-specified or common.
       */
      maximumAllowedDailyValue?: number;
      /**
       * Format: float
       * @description User-Defined Variable Setting: The maximum allowed value a single measurement. While you can record a value above this maximum, it will be excluded from the correlation analysis.  Unit: User-specified or common.
       */
      maximumAllowedValue?: number;
      /**
       * Format: float
       * @description Calculated Statistic: Maximum recorded daily value of this variable. Unit: User-specified or common.
       */
      maximumRecordedDailyValue?: number;
      /**
       * Format: double
       * @description Calculated Statistic: Ex: 1. Unit: User-specified or common.
       */
      maximumRecordedValue?: number;
      /**
       * Format: float
       * @description Mean. Unit: User-specified or common.
       */
      mean?: number;
      /**
       * Format: int32
       * @description Number of measurements at last analysis
       */
      measurementsAtLastAnalysis?: number;
      /**
       * Format: float
       * @description Median
       */
      median?: number;
      /**
       * Format: float
       * @description User-Defined Variable Setting: The minimum allowed value a single measurement. While you can record a value below this minimum, it will be excluded from the correlation analysis. Unit: User-specified or common
       */
      minimumAllowedValue?: number;
      /**
       * Format: float
       * @description User-Defined Variable Setting: The minimum allowed value a daily aggregated measurement.  For instance, you might set to 100 for steps to keep erroneous 0 daily steps out of the analysis. Unit: User-specified or common.
       */
      minimumAllowedDailyValue?: number;
      /**
       * Format: float
       * @description User-Defined Variable Setting: The minimum allowed non-zero value a single measurement.  For instance, you might set to 100 mL for steps to keep erroneous 0 daily steps out of the analysis. Unit: User-specified or common.
       */
      minimumNonZeroValue?: number;
      /**
       * Format: float
       * @description Minimum recorded value of this variable. Unit: User-specified or common.
       */
      minimumRecordedValue?: number;
      /** @description Ex: 51 */
      mostCommonConnectorId?: number;
      /** @description Ex: 23 */
      mostCommonOriginalUnitId?: number;
      /**
       * Format: int32
       * @description Most common Unit ID
       */
      mostCommonUnitId?: number;
      /**
       * Format: float
       * @description Calculated Statistic: Most common value. Unit: User-specified or common.
       */
      mostCommonValue?: number;
      /** @description Ex: Trader Joes Bedtime Tea / Sleepytime Tea (any Brand) */
      name: string;
      /** @description Ex: 1 */
      numberOfGlobalVariableRelationshipsAsCause?: number;
      /** @description Ex: 310 */
      numberOfGlobalVariableRelationshipsAsEffect?: number;
      /**
       * Format: int32
       * @description Number of changes
       */
      numberOfChanges?: number;
      /**
       * Format: int32
       * @description Number of user_variable_relationships for this variable
       */
      numberOfCorrelations?: number;
      /** @description numberOfGlobalVariableRelationshipsAsCause plus numberOfUserVariableRelationshipsAsCause */
      numberOfCorrelationsAsCause?: number;
      /** @description numberOfGlobalVariableRelationshipsAsEffect plus numberOfUserVariableRelationshipsAsEffect */
      numberOfCorrelationsAsEffect?: number;
      /**
       * Format: int32
       * @description Number of processed measurements
       */
      numberOfProcessedDailyMeasurements?: number;
      /** @description Ex: 295 */
      numberOfRawMeasurements?: number;
      /** @description Ex: 1 */
      numberOfTrackingReminders?: number;
      /**
       * Format: float
       * @description Number of unique daily values
       */
      numberOfUniqueDailyValues?: number;
      /** @description Ex: 2 */
      numberOfUniqueValues?: number;
      /** @description Ex: 115 */
      numberOfUserVariableRelationshipsAsCause?: number;
      /** @description Ex: 29014 */
      numberOfUserVariableRelationshipsAsEffect?: number;
      /** @description Ex: 2 */
      numberOfUserVariables?: number;
      /**
       * Format: int32
       * @description The amount of time in seconds that elapses after the predictor/stimulus event before the outcome as perceived by a self-tracker is known as the onset delay. For example, the onset delay between the time a person takes an aspirin (predictor/stimulus event) and the time a person perceives a change in their headache severity (outcome) is approximately 30 minutes.
       */
      onsetDelay?: number;
      /**
       * Format: double
       * @description User-Defined Variable Setting: The amount of time in seconds that elapses after the predictor/stimulus event before the outcome as perceived by a self-tracker is known as the onset delay. For example, the onset delay between the time a person takes an aspirin (predictor/stimulus event) and the time a person perceives a change in their headache severity (outcome) is approximately 30 minutes.
       */
      onsetDelayInHours?: number;
      /** @description User-Defined Variable Setting: True for variables for which a human would generally want to identify the influencing factors. These include symptoms of illness, physique, mood, cognitive performance, etc.  Generally correlation calculations are only performed on outcome variables */
      outcome?: boolean;
      /** @description Do you want to receive updates on newly discovered factors influencing this variable? */
      outcomeOfInterest?: boolean;
      /** @description Ex: img/variable_categories/treatments.png */
      pngPath?: string;
      /** @description Ex: https://safe.fdai.earth/img/variable_categories/treatments.png */
      pngUrl?: string;
      /** @description Ex: 0 */
      predictorOfInterest?: number;
      /**
       * Format: double
       * @description Ex: 95.4
       */
      price?: number;
      /** @description Link to associated product for purchase */
      productUrl?: string;
      /** @description Should this variable show up in automcomplete searches for users who do not already have measurements for it? */
      public?: boolean;
      /** @description Ex: How is your overall mood? */
      question?: string;
      /** @description Ex: How is your overall mood on a scale of 1 to 5?? */
      longQuestion?: string;
      /** @description Ex: 131 */
      rawMeasurementsAtLastAnalysis?: number;
      /**
       * Format: double
       * @description Calculated Statistic: Ex: 1. Unit: User-specified or common.
       */
      secondMostCommonValue?: number;
      /**
       * Format: double
       * @description Calculated Statistic: Ex: 250. Unit: User-specified or common.
       */
      secondToLastValue?: number;
      /** @description Would you like to make your measurements publicly visible? */
      shareUserMeasurements?: boolean;
      /**
       * Format: float
       * @description Skewness
       */
      skewness?: number;
      /**
       * Format: double
       * @description Standard deviation Ex: 0.46483219855434
       */
      standardDeviation?: number;
      /** @description status */
      status?: string;
      /** @description Based on sort filter and can be shown beneath variable name on search list */
      subtitle?: string;
      /** @description Ex: https://safe.fdai.earth/img/variable_categories/treatments.svg */
      svgUrl?: string;
      /**
       * Format: double
       * @description Calculated Statistic: Ex: 6. Unit: User-specified or common.
       */
      thirdMostCommonValue?: number;
      /**
       * Format: double
       * @description Calculated Statistic: Ex: 250. Unit: User-specified or common.
       */
      thirdToLastValue?: number;
      /** @description HTML instructions for tracking */
      trackingInstructions?: string;
      trackingInstructionsCard?: components["schemas"]["Card"];
      unit?: components["schemas"]["Unit"];
      /** @description Ex: count */
      unitAbbreviatedName?: string;
      /** @description Ex: 6 */
      unitCategoryId?: number;
      /** @description Ex: Miscellany */
      unitCategoryName?: string;
      /**
       * Format: int32
       * @description ID of unit to use for this variable
       */
      unitId?: number;
      /** @description User-Defined Variable Setting: Count */
      unitName?: string;
      /** @description Universal product code or similar */
      upc?: string;
      /**
       * Format: int32
       * @description updated
       */
      updated?: number;
      /** @description When the record in the database was last updated. Use UTC ISO 8601 YYYY-MM-DDThh:mm:ss datetime format */
      updatedAt?: string;
      /** @description Ex: 2017-07-30 14:58:26 */
      updatedTime?: string;
      /**
       * Format: int32
       * @description User ID
       */
      userId: number;
      /** @description Ex: count */
      userVariableUnitAbbreviatedName?: string;
      /** @description Ex: 6 */
      userVariableUnitCategoryId?: number;
      /** @description Ex: Miscellany */
      userVariableUnitCategoryName?: string;
      /** @description Ex: 23 */
      userVariableUnitId?: number;
      /** @description Ex: Count */
      userVariableUnitName?: string;
      /** @description Valence indicates what type of buttons should be used when recording measurements for this variable. positive - Face buttons with the happiest face equating to a 5/5 rating where higher is better like Overall Mood. negative - Face buttons with the happiest face equating to a 1/5 rating where lower is better like Headache Severity. numeric - Just 1 to 5 numeric buttons for neutral variables. */
      valence?: string;
      /** @description Ex: 6 */
      variableCategoryId?: number;
      /**
       * @description User-Defined Variable Setting: Variable category like Emotions, Sleep, Physical Activities, Treatments, Symptoms, etc.
       * @enum {string}
       */
      variableCategoryName?: "Activity" | "Books" | "Causes of Illness" | "Cognitive Performance" | "Conditions" | "Emotions" | "Environment" | "Foods" | "Goals" | "Locations" | "Miscellaneous" | "Movies and TV" | "Music" | "Nutrients" | "Payments" | "Physical Activities" | "Physique" | "Sleep" | "Social Interactions" | "Software" | "Symptoms" | "Treatments" | "Vital Signs";
      /** @description Ex: 96380 */
      variableId: number;
      /** @description Ex: Sleep Duration */
      variableName?: string;
      /**
       * Format: double
       * @description Statistic: Ex: 115947037.40816
       */
      variance?: number;
      /** @description User-Defined Variable Setting: You can help to improve the studies by pasting the title of the most appropriate Wikipedia article for this variable */
      wikipediaTitle?: string;
    };
    Variable: {
      actionArray?: components["schemas"]["TrackingReminderNotificationAction"][];
      /** @description User-Defined Variable Setting:  Alternative display name */
      alias?: string;
      availableUnits?: components["schemas"]["Unit"][];
      /** @description Link to study comparing variable with strongest relationship for user or population */
      bestStudyLink?: string;
      bestStudyCard?: components["schemas"]["Card"];
      /** @description Link to study comparing variable with strongest relationship for user */
      bestUserStudyLink?: string;
      bestUserStudyCard?: components["schemas"]["Card"];
      /** @description Link to study comparing variable with strongest relationship for population */
      bestPopulationStudyLink?: string;
      bestPopulationStudyCard?: components["schemas"]["Card"];
      /** @description Description of relationship with variable with strongest relationship for user or population */
      optimalValueMessage?: string;
      /** @description Description of relationship with variable with strongest relationship for population */
      commonOptimalValueMessage?: string;
      /** @description Description of relationship with variable with strongest relationship for user */
      userOptimalValueMessage?: string;
      card?: components["schemas"]["Card"];
      /** @description User-Defined Variable Setting: True indicates that this variable is generally a cause in a causal relationship.  An example of a causeOnly variable would be a variable such as Cloud Cover which would generally not be influenced by the behaviour of the user */
      causeOnly?: boolean;
      charts?: components["schemas"]["VariableCharts"];
      /** @description Ex: https://local.quantimo.do/ionic/Modo/www/#/app/charts/Trader%20Joes%20Bedtime%20Tea%20%2F%20Sleepytime%20Tea%20%28any%20Brand%29?variableName=Trader%20Joes%20Bedtime%20Tea%20%2F%20Sleepytime%20Tea%20%28any%20Brand%29&userId=230&pngUrl=https%3A%2F%2Fapi.quantimo.do%2Fionic%2FModo%2Fwww%2Fimg%2Fvariable_categories%2Ftreatments.png */
      chartsLinkDynamic?: string;
      /** @description Ex: mailto:?subject=Check%20out%20my%20Trader%20Joes%20Bedtime%20Tea%20%2F%20Sleepytime%20Tea%20%28any%20Brand%29%20data%21&body=See%20my%20Trader%20Joes%20Bedtime%20Tea%20%2F%20Sleepytime%20Tea%20%28any%20Brand%29%20history%20at%20https%3A%2F%2Flocal.quantimo.do%2Fapi%2Fv2%2Fcharts%3FvariableName%3DTrader%2520Joes%2520Bedtime%2520Tea%2520%252F%2520Sleepytime%2520Tea%2520%2528any%2520Brand%2529%26userId%3D230%26pngUrl%3Dhttps%253A%252F%252Fapi.quantimo.do%252Fionic%252FModo%252Fwww%252Fimg%252Fvariable_categories%252Ftreatments.png%0A%0AHave%20a%20great%20day! */
      chartsLinkEmail?: string;
      /** @description Ex: https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Flocal.quantimo.do%2Fapi%2Fv2%2Fcharts%3FvariableName%3DTrader%2520Joes%2520Bedtime%2520Tea%2520%252F%2520Sleepytime%2520Tea%2520%2528any%2520Brand%2529%26userId%3D230%26pngUrl%3Dhttps%253A%252F%252Fapi.quantimo.do%252Fionic%252FModo%252Fwww%252Fimg%252Fvariable_categories%252Ftreatments.png */
      chartsLinkFacebook?: string;
      /** @description Ex: https://plus.google.com/share?url=https%3A%2F%2Flocal.quantimo.do%2Fapi%2Fv2%2Fcharts%3FvariableName%3DTrader%2520Joes%2520Bedtime%2520Tea%2520%252F%2520Sleepytime%2520Tea%2520%2528any%2520Brand%2529%26userId%3D230%26pngUrl%3Dhttps%253A%252F%252Fapi.quantimo.do%252Fionic%252FModo%252Fwww%252Fimg%252Fvariable_categories%252Ftreatments.png */
      chartsLinkGoogle?: string;
      /** @description Ex: https://local.quantimo.do/api/v2/charts?variableName=Trader%20Joes%20Bedtime%20Tea%20%2F%20Sleepytime%20Tea%20%28any%20Brand%29&userId=230&pngUrl=https%3A%2F%2Fapi.quantimo.do%2Fionic%2FModo%2Fwww%2Fimg%2Fvariable_categories%2Ftreatments.png */
      chartsLinkStatic?: string;
      /** @description Ex: https://twitter.com/home?status=Check%20out%20my%20Trader%20Joes%20Bedtime%20Tea%20%2F%20Sleepytime%20Tea%20%28any%20Brand%29%20data%21%20https%3A%2F%2Flocal.quantimo.do%2Fapi%2Fv2%2Fcharts%3FvariableName%3DTrader%2520Joes%2520Bedtime%2520Tea%2520%252F%2520Sleepytime%2520Tea%2520%2528any%2520Brand%2529%26userId%3D230%26pngUrl%3Dhttps%253A%252F%252Fapi.quantimo.do%252Fionic%252FModo%252Fwww%252Fimg%252Fvariable_categories%252Ftreatments.png%20%40curedao */
      chartsLinkTwitter?: string;
      /** @description Commonly defined for all users. An example of a parent category variable would be Fruit when tagged with the child sub-type variables Apple.  Child variable (Apple) measurements will be included when the parent category (Fruit) is analyzed.  This allows us to see how Fruit consumption might be affecting without having to record both Fruit and Apple intake. */
      childCommonTagVariables?: components["schemas"]["TagVariable"][];
      /** @description User-Defined Variable Setting: An example of a parent category variable would be Fruit when tagged with the child sub-type variables Apple.  Child variable (Apple) measurements will be included when the parent category (Fruit) is analyzed.  This allows us to see how Fruit consumption might be affecting without having to record both Fruit and Apple intake. */
      childUserTagVariables?: components["schemas"]["TagVariable"][];
      /** @description Your client id can be obtained by creating an app at https://builder.quantimo.do */
      clientId?: string;
      /**
       * @description User-Defined Variable Setting: How to aggregate measurements over time. SUM should be used for things like minutes of exercise.  If you use MEAN for exercise, then a person might exercise more minutes in one day but add separate measurements that were smaller.  So when we are doing correlational analysis, we would think that the person exercised less that day even though they exercised more.  Conversely, we must use MEAN for things such as ratings which cannot be SUMMED.
       * @enum {string}
       */
      combinationOperation?: "MEAN" | "SUM";
      /** @description Ex: Anxiety / Nervousness */
      commonAlias?: string;
      commonTaggedVariables?: components["schemas"]["TagVariable"][];
      commonTagVariables?: components["schemas"]["TagVariable"][];
      /** @description When the record was first created. Use UTC ISO 8601 YYYY-MM-DDThh:mm:ss  datetime format */
      createdAt?: string;
      /** @description Comma-separated list of source names to limit variables to those sources */
      dataSourceNames?: string;
      /** @description These are sources of measurements for this variable */
      dataSources?: components["schemas"]["DataSource"][];
      /** @description User-Defined Variable Setting: Ex: Summary to be used in studies. */
      description?: string;
      /** @description Ex: Trader Joe's Bedtime Tea */
      displayName?: string;
      /**
       * Format: int32
       * @description The amount of time over which a predictor/stimulus event can exert an observable influence on an outcome variable value. For instance, aspirin (stimulus/predictor) typically decreases headache severity for approximately four hours (duration of action) following the onset delay. Unit: Seconds
       */
      durationOfAction?: number;
      /**
       * Format: float
       * @description User-Defined Variable Setting: The amount of time over which a predictor/stimulus event can exert an observable influence on an outcome variable value. For instance, aspirin (stimulus/predictor) typically decreases headache severity for approximately four hours (duration of action) following the onset delay.  Unit: Hours
       */
      durationOfActionInHours?: number;
      /**
       * Format: int32
       * @description Earliest filling time
       */
      earliestFillingTime?: number;
      /**
       * Format: int32
       * @description Earliest measurement time
       */
      earliestMeasurementTime?: number;
      /**
       * Format: int32
       * @description Earliest source time
       */
      earliestSourceTime?: number;
      /** @description Error message from last analysis */
      errorMessage?: string;
      /** @description User-Defined Variable Setting: Latest measurement time to be used in analysis. Format: UTC ISO 8601 YYYY-MM-DDThh:mm:ss. */
      experimentEndTime?: string;
      /** @description User-Defined Variable Setting: Earliest measurement time to be used in analysis. Format: UTC ISO 8601 YYYY-MM-DDThh:mm:ss. */
      experimentStartTime?: string;
      /**
       * @description User-Defined Variable Setting: When it comes to analysis to determine the effects of this variable, knowing when it did not occur is as important as knowing when it did occur. For example, if you are tracking a medication, it is important to know when you did not take it, but you do not have to log zero values for all the days when you haven't taken it. Hence, you can specify a filling value (typically 0) to insert whenever data is missing.
       * @enum {string}
       */
      fillingType?: "none" | "zero-filling" | "value-filling";
      /**
       * Format: float
       * @description User-Defined Variable Setting: When it comes to analysis to determine the effects of this variable, knowing when it did not occur is as important as knowing when it did occur. For example, if you are tracking a medication, it is important to know when you did not take it, but you do not have to log zero values for all the days when you haven't taken it. Hence, you can specify a filling value (typically 0) to insert whenever data is missing.  Unit: User-specified or common.
       */
      fillingValue?: number;
      /** @description Ex: ion-sad-outline */
      iconIcon?: string;
      /** @description Ex: 95614 */
      id: number;
      imageUrl?: string;
      /** @description Ex: https://google.com */
      informationalUrl?: string;
      /** @description Commonly defined for all users. IngredientOf variable measurements will be included in analysis of the ingredient variable.  For instance, a ingredient of the variable Lollipop could be Sugar.  This way you only have to record Lollipop consumption, and we can use this data to see how sugar might be affecting you. */
      ingredientOfCommonTagVariables?: components["schemas"]["TagVariable"][];
      /** @description Commonly defined for all users. IngredientOf variable measurements will be included in analysis of the ingredient variable.  For instance, a ingredient of the variable Lollipop could be Sugar.  This way you only have to record Lollipop consumption, and we can use this data to see how sugar might be affecting you. */
      ingredientCommonTagVariables?: components["schemas"]["TagVariable"][];
      /** @description User-Defined Variable Setting: IngredientOf variable measurements will be included in analysis of the ingredient variable.  For instance, a ingredient of the variable Lollipop could be Sugar.  This way you only have to record Lollipop consumption, and we can use this data to see how sugar might be affecting you. */
      ingredientOfUserTagVariables?: components["schemas"]["TagVariable"][];
      /** @description User-Defined Variable Setting: IngredientOf variable measurements will be included in analysis of the ingredient variable.  For instance, a ingredient of the variable Lollipop could be Sugar.  This way you only have to record Lollipop consumption, and we can use this data to see how sugar might be affecting you. */
      ingredientUserTagVariables?: components["schemas"]["TagVariable"][];
      /** @description Type of input field to show for recording measurements */
      inputType?: string;
      ionIcon?: string;
      /** @description Commonly defined for all users.  Joining can be used used to merge duplicate variables. For instance, if two variables called Apples (Red Delicious) and Red Delicious Apples are joined, when one of them is analyzed, the measurements for the other will be included as well. */
      joinedCommonTagVariables?: components["schemas"]["TagVariable"][];
      /** @description User-Defined Variable Setting: Joining can be used used to merge duplicate variables. For instance, if two variables called Apples (Red Delicious) and Red Delicious Apples are joined, when one of them is analyzed, the measurements for the other will be included as well. */
      joinedUserTagVariables?: components["schemas"]["TagVariable"][];
      /**
       * Format: int32
       * @description Duplicate variables. If the variable is joined with some other variable then it is not shown to user in the list of variables
       */
      joinWith?: number;
      /**
       * Format: float
       * @description Kurtosis
       */
      kurtosis?: number;
      /**
       * Format: double
       * @description Calculated Statistic: Ex: 500. Unit: User-specified or common.
       */
      lastProcessedDailyValue?: number;
      /** @description When this variable or its settings were last updated UTC ISO 8601 YYYY-MM-DDThh:mm:ss */
      lastSuccessfulUpdateTime?: string;
      /**
       * Format: float
       * @description Calculated Statistic: Last measurement value in the common unit or user unit if different. Unit: User-specified or common.
       */
      lastValue?: number;
      /**
       * Format: int32
       * @description Latest filling time
       */
      latestFillingTime?: number;
      /**
       * Format: int32
       * @description Latest measurement time. Format: Unix-time epoch seconds.
       */
      latestMeasurementTime?: number;
      /**
       * Format: int32
       * @description Latest source time. Format: Unix-time epoch seconds.
       */
      latestSourceTime?: number;
      /** @description Ex: 1501383600. Format: Unix-time epoch seconds. */
      latestUserMeasurementTime?: number;
      /**
       * Format: float
       * @description Latitude. Unit: User-specified or common.
       */
      latitude?: number;
      /** @description Location */
      location?: string;
      /**
       * Format: float
       * @description Longitude
       */
      longitude?: number;
      /** @description True if the variable is an emotion or symptom rating that is not typically automatically collected by a device or app. */
      manualTracking?: boolean;
      /**
       * Format: float
       * @description User-Defined Variable Setting: The maximum allowed value a daily aggregated measurement. Unit: User-specified or common.
       */
      maximumAllowedDailyValue?: number;
      /**
       * Format: float
       * @description User-Defined Variable Setting: The maximum allowed value a single measurement. While you can record a value above this maximum, it will be excluded from the correlation analysis.  Unit: User-specified or common.
       */
      maximumAllowedValue?: number;
      /**
       * Format: float
       * @description Calculated Statistic: Maximum recorded daily value of this variable. Unit: User-specified or common.
       */
      maximumRecordedDailyValue?: number;
      /**
       * Format: double
       * @description Calculated Statistic: Ex: 1. Unit: User-specified or common.
       */
      maximumRecordedValue?: number;
      /**
       * Format: float
       * @description Mean. Unit: User-specified or common.
       */
      mean?: number;
      /**
       * Format: int32
       * @description Number of measurements at last analysis
       */
      measurementsAtLastAnalysis?: number;
      /**
       * Format: float
       * @description Median
       */
      median?: number;
      /**
       * Format: float
       * @description User-Defined Variable Setting: The minimum allowed value a single measurement. While you can record a value below this minimum, it will be excluded from the correlation analysis. Unit: User-specified or common
       */
      minimumAllowedValue?: number;
      /**
       * Format: float
       * @description User-Defined Variable Setting: The minimum allowed value a daily aggregated measurement.  For instance, you might set to 100 for steps to keep erroneous 0 daily steps out of the analysis. Unit: User-specified or common.
       */
      minimumAllowedDailyValue?: number;
      /**
       * Format: float
       * @description User-Defined Variable Setting: The minimum allowed non-zero value a single measurement.  For instance, you might set to 100 mL for steps to keep erroneous 0 daily steps out of the analysis. Unit: User-specified or common.
       */
      minimumNonZeroValue?: number;
      /**
       * Format: float
       * @description Minimum recorded value of this variable. Unit: User-specified or common.
       */
      minimumRecordedValue?: number;
      /** @description Ex: 51 */
      mostCommonConnectorId?: number;
      /** @description Ex: 23 */
      mostCommonOriginalUnitId?: number;
      /**
       * Format: int32
       * @description Most common Unit ID
       */
      mostCommonUnitId?: number;
      /**
       * Format: float
       * @description Calculated Statistic: Most common value. Unit: User-specified or common.
       */
      mostCommonValue?: number;
      /** @description Ex: Trader Joes Bedtime Tea / Sleepytime Tea (any Brand) */
      name: string;
      /** @description Ex: 1 */
      numberOfGlobalVariableRelationshipsAsCause?: number;
      /** @description Ex: 310 */
      numberOfGlobalVariableRelationshipsAsEffect?: number;
      /**
       * Format: int32
       * @description Number of changes
       */
      numberOfChanges?: number;
      /**
       * Format: int32
       * @description Number of user_variable_relationships for this variable
       */
      numberOfCorrelations?: number;
      /** @description numberOfGlobalVariableRelationshipsAsCause plus numberOfUserVariableRelationshipsAsCause */
      numberOfCorrelationsAsCause?: number;
      /** @description numberOfGlobalVariableRelationshipsAsEffect plus numberOfUserVariableRelationshipsAsEffect */
      numberOfCorrelationsAsEffect?: number;
      /**
       * Format: int32
       * @description Number of processed measurements
       */
      numberOfProcessedDailyMeasurements?: number;
      /** @description Ex: 295 */
      numberOfRawMeasurements?: number;
      /** @description Ex: 1 */
      numberOfTrackingReminders?: number;
      /**
       * Format: float
       * @description Number of unique daily values
       */
      numberOfUniqueDailyValues?: number;
      /** @description Ex: 2 */
      numberOfUniqueValues?: number;
      /** @description Ex: 115 */
      numberOfUserVariableRelationshipsAsCause?: number;
      /** @description Ex: 29014 */
      numberOfUserVariableRelationshipsAsEffect?: number;
      /** @description Ex: 2 */
      numberOfUserVariables?: number;
      /**
       * Format: int32
       * @description The amount of time in seconds that elapses after the predictor/stimulus event before the outcome as perceived by a self-tracker is known as the onset delay. For example, the onset delay between the time a person takes an aspirin (predictor/stimulus event) and the time a person perceives a change in their headache severity (outcome) is approximately 30 minutes.
       */
      onsetDelay?: number;
      /**
       * Format: double
       * @description User-Defined Variable Setting: The amount of time in seconds that elapses after the predictor/stimulus event before the outcome as perceived by a self-tracker is known as the onset delay. For example, the onset delay between the time a person takes an aspirin (predictor/stimulus event) and the time a person perceives a change in their headache severity (outcome) is approximately 30 minutes.
       */
      onsetDelayInHours?: number;
      /** @description User-Defined Variable Setting: True for variables for which a human would generally want to identify the influencing factors. These include symptoms of illness, physique, mood, cognitive performance, etc.  Generally correlation calculations are only performed on outcome variables */
      outcome?: boolean;
      /** @description Do you want to receive updates on newly discovered factors influencing this variable? */
      outcomeOfInterest?: boolean;
      /** @description Commonly defined for all users.  An example of a parent category variable would be Fruit when tagged with the child sub-type variables Apple.  Child variable (Apple) measurements will be included when the parent category (Fruit) is analyzed.  This allows us to see how Fruit consumption might be affecting without having to record both Fruit and Apple intake. */
      parentCommonTagVariables?: components["schemas"]["TagVariable"][];
      /** @description User-defined. An example of a parent category variable would be Fruit when tagged with the child sub-type variables Apple.  Child variable (Apple) measurements will be included when the parent category (Fruit) is analyzed.  This allows us to see how Fruit consumption might be affecting without having to record both Fruit and Apple intake. */
      parentUserTagVariables?: components["schemas"]["TagVariable"][];
      /** @description Ex: img/variable_categories/treatments.png */
      pngPath?: string;
      /** @description Ex: https://safe.fdai.earth/img/variable_categories/treatments.png */
      pngUrl?: string;
      /** @description Ex: 0 */
      predictorOfInterest?: number;
      /**
       * Format: double
       * @description Ex: 95.4
       */
      price?: number;
      /** @description Link to associated product for purchase */
      productUrl?: string;
      /** @description Should this variable show up in automcomplete searches for users who do not already have measurements for it? */
      public?: boolean;
      /** @description Ex: How is your overall mood? */
      question?: string;
      /** @description Ex: How is your overall mood on a scale of 1 to 5?? */
      longQuestion?: string;
      /** @description Ex: 131 */
      rawMeasurementsAtLastAnalysis?: number;
      /**
       * Format: double
       * @description Calculated Statistic: Ex: 1. Unit: User-specified or common.
       */
      secondMostCommonValue?: number;
      /**
       * Format: double
       * @description Calculated Statistic: Ex: 250. Unit: User-specified or common.
       */
      secondToLastValue?: number;
      /** @description Would you like to make your measurements publicly visible? */
      shareUserMeasurements?: boolean;
      /**
       * Format: float
       * @description Skewness
       */
      skewness?: number;
      /**
       * Format: double
       * @description Standard deviation Ex: 0.46483219855434
       */
      standardDeviation?: number;
      /** @description status */
      status?: string;
      /** @description Based on sort filter and can be shown beneath variable name on search list */
      subtitle?: string;
      /** @description Ex: https://safe.fdai.earth/img/variable_categories/treatments.svg */
      svgUrl?: string;
      /**
       * Format: double
       * @description Calculated Statistic: Ex: 6. Unit: User-specified or common.
       */
      thirdMostCommonValue?: number;
      /**
       * Format: double
       * @description Calculated Statistic: Ex: 250. Unit: User-specified or common.
       */
      thirdToLastValue?: number;
      /** @description HTML instructions for tracking */
      trackingInstructions?: string;
      trackingInstructionsCard?: components["schemas"]["Card"];
      unit?: components["schemas"]["Unit"];
      /** @description Ex: count */
      unitAbbreviatedName?: string;
      /** @description Ex: 6 */
      unitCategoryId?: number;
      /** @description Ex: Miscellany */
      unitCategoryName?: string;
      /**
       * Format: int32
       * @description ID of unit to use for this variable
       */
      unitId?: number;
      /** @description User-Defined Variable Setting: Count */
      unitName?: string;
      /** @description Universal product code or similar */
      upc?: string;
      /**
       * Format: int32
       * @description updated
       */
      updated?: number;
      /** @description When the record in the database was last updated. Use UTC ISO 8601 YYYY-MM-DDThh:mm:ss datetime format */
      updatedAt?: string;
      /** @description Ex: 2017-07-30 14:58:26 */
      updatedTime?: string;
      /**
       * Format: int32
       * @description User ID
       */
      userId: number;
      userTaggedVariables?: components["schemas"]["TagVariable"][];
      userTagVariables?: components["schemas"]["TagVariable"][];
      /** @description Ex: count */
      userVariableUnitAbbreviatedName?: string;
      /** @description Ex: 6 */
      userVariableUnitCategoryId?: number;
      /** @description Ex: Miscellany */
      userVariableUnitCategoryName?: string;
      /** @description Ex: 23 */
      userVariableUnitId?: number;
      /** @description Ex: Count */
      userVariableUnitName?: string;
      variableCategory?: components["schemas"]["VariableCategory"];
      /** @description Array of Variables that are joined with this Variable */
      joinedVariables?: components["schemas"]["TagVariable"][];
      /** @description Valence indicates what type of buttons should be used when recording measurements for this variable. positive - Face buttons with the happiest face equating to a 5/5 rating where higher is better like Overall Mood. negative - Face buttons with the happiest face equating to a 1/5 rating where lower is better like Headache Severity. numeric - Just 1 to 5 numeric buttons for neutral variables. */
      valence?: string;
      /** @description Ex: 6 */
      variableCategoryId?: number;
      /**
       * @description User-Defined Variable Setting: Variable category like Emotions, Sleep, Physical Activities, Treatments, Symptoms, etc.
       * @enum {string}
       */
      variableCategoryName?: "Activity" | "Books" | "Causes of Illness" | "Cognitive Performance" | "Conditions" | "Emotions" | "Environment" | "Foods" | "Goals" | "Locations" | "Miscellaneous" | "Movies and TV" | "Music" | "Nutrients" | "Payments" | "Physical Activities" | "Physique" | "Sleep" | "Social Interactions" | "Software" | "Symptoms" | "Treatments" | "Vital Signs";
      /** @description Ex: 96380 */
      variableId: number;
      /** @description Ex: Sleep Duration */
      variableName?: string;
      /**
       * Format: double
       * @description Statistic: Ex: 115947037.40816
       */
      variance?: number;
      /** @description User-Defined Variable Setting: You can help to improve the studies by pasting the title of the most appropriate Wikipedia article for this variable */
      wikipediaTitle?: string;
    };
    UserVariableDelete: {
      /** @description Id of the variable whose measurements should be deleted */
      variableId: number;
    };
    VariableCategory: {
      /** @description Ex: mood */
      appType?: string;
      /** @description Ex: false */
      causeOnly?: boolean;
      /** @description Ex: MEAN */
      combinationOperation?: string;
      /** @description UTC ISO 8601 YYYY-MM-DDThh:mm:ss */
      createdTime?: string;
      /** @description Ex: /5 */
      unitAbbreviatedName?: string;
      /** @description Ex: 10 */
      unitId?: number;
      /** @description User-Defined Variable Setting: The amount of time over which a predictor/stimulus event can exert an observable influence on an outcome variable value. For instance, aspirin (stimulus/predictor) typically decreases headache severity for approximately four hours (duration of action) following the onset delay.  Unit: Seconds */
      durationOfAction?: number;
      /** @description Ex: -1. Unit: Variable category default unit. */
      fillingValue?: number;
      /** @description Ex: What emotion do you want to rate? */
      helpText?: string;
      /** @description Ex: 1 */
      id?: number;
      /** @description Ex: https://static.quantimo.do/img/variable_categories/theatre_mask-96.png */
      imageUrl?: string;
      /** @description Ex: ion-happy-outline */
      ionIcon?: string;
      /** @description Ex: true */
      manualTracking?: boolean;
      /** @description Unit: Variable category default unit. */
      maximumAllowedValue?: string;
      /** @description Ex: rating */
      measurementSynonymSingularLowercase?: string;
      /** @description Unit: Variable category default unit. */
      minimumAllowedValue?: string;
      /** @description Ex: Do you have any emotions that fluctuate regularly?  If so, add them so I can try to determine which factors are influencing them. */
      moreInfo?: string;
      /** @description Category name */
      name: string;
      /** @description Ex: 0 */
      onsetDelay?: number;
      /** @description Ex: true */
      outcome?: boolean;
      /** @description Ex: img/variable_categories/emotions.png */
      pngPath?: string;
      /** @description Ex: https://safe.fdai.earth/img/variable_categories/emotions.png */
      pngUrl?: string;
      /** @description Ex: true */
      public?: boolean;
      /** @description Ex: img/variable_categories/emotions.svg */
      svgPath?: string;
      /** @description Ex: https://safe.fdai.earth/img/variable_categories/emotions.svg */
      svgUrl?: string;
      /** @description Ex: 1 */
      updated?: number;
      /** @description UTC ISO 8601 YYYY-MM-DDThh:mm:ss */
      updatedTime?: string;
      /**
       * @description Ex: Emotions, Treatments, Symptoms...
       * @enum {string}
       */
      variableCategoryName?: "Activity" | "Books" | "Causes of Illness" | "Cognitive Performance" | "Conditions" | "Emotions" | "Environment" | "Foods" | "Goals" | "Locations" | "Miscellaneous" | "Movies and TV" | "Music" | "Nutrients" | "Payments" | "Physical Activities" | "Physique" | "Sleep" | "Social Interactions" | "Software" | "Symptoms" | "Treatments" | "Vital Signs";
      /** @description Ex: Emotion */
      variableCategoryNameSingular?: string;
    };
    /** @description An object with various chart properties each property contain and svg and Highcharts configuration */
    VariableCharts: {
      hourlyColumnChart?: components["schemas"]["Chart"];
      monthlyColumnChart?: components["schemas"]["Chart"];
      distributionColumnChart?: components["schemas"]["Chart"];
      weekdayColumnChart?: components["schemas"]["Chart"];
      lineChartWithoutSmoothing?: components["schemas"]["Chart"];
      lineChartWithSmoothing?: components["schemas"]["Chart"];
    };
    Vote: {
      /** @description Cause variable id */
      causeVariableId: number;
      /** @description Your client id can be obtained by creating an app at https://builder.quantimo.do */
      clientId: string;
      /** @description When the record was first created. Use UTC ISO 8601 YYYY-MM-DDThh:mm:ss datetime format */
      createdAt?: string;
      /** @description Effect variable id */
      effectVariableId: number;
      /**
       * Format: int32
       * @description id
       */
      id?: number;
      /** @description When the record in the database was last updated. Use UTC ISO 8601 YYYY-MM-DDThh:mm:ss datetime format */
      updatedAt?: string;
      /**
       * Format: int32
       * @description ID of User
       */
      userId: number;
      /**
       * @description Vote down for implausible/not-useful or up for plausible/useful. Vote none to delete a previous vote.
       * @enum {string}
       */
      value: "up" | "down" | "none";
      /**
       * @description Your client id can be obtained by creating an app at https://builder.quantimo.do
       * @enum {string}
       */
      type?: "causality" | "usefulness";
    };
  };
  responses: never;
  parameters: {
    /** @description Ex: 2.1.1.0 */
    appVersionParam?: string;
    /** @description Deprecated: Name of the hypothetical predictor variable.  Ex: Sleep Duration */
    causeVariableNameParam?: string;
    /** @description Variable id of the hypothetical predictor variable.  Ex: 1398 */
    causeVariableIdParam?: number;
    /** @description Your client id can be obtained by creating an app at https://builder.quantimo.do */
    clientIdParam?: string;
    /** @description This is the secret for your obtained clientId. We use this to ensure that only your application uses the clientId.  Obtain this by creating a free application at [https://builder.quantimo.do](https://builder.quantimo.do). */
    clientSecretParam?: string;
    /** @description Ex: 74802 */
    clientUserIdParam?: number;
    /** @description Authorization code you received with the previous request. */
    codeParam: string;
    /** @description Ex: facebook */
    connectorNameParam?: string;
    /** @description Lowercase system name of the source application or device. Get a list of available connectors from the /v3/connectors/list endpoint. */
    connectorNamePathParam: "facebook" | "fitbit" | "github" | "googlecalendar" | "googlefit" | "medhelper" | "mint" | "moodpanda" | "moodscope" | "myfitnesspal" | "mynetdiary" | "netatmo" | "rescuetime" | "runkeeper" | "slack" | "sleepcloud" | "slice" | "up" | "whatpulse" | "withings" | "worldweatheronline" | "foursquare" | "strava" | "gmail";
    /** @description Pearson correlation coefficient between cause and effect after lagging by onset delay and grouping by duration of action */
    correlationCoefficientParam?: string;
    /** @description These are studies that you have created */
    createdParam?: boolean;
    /** @description These are studies that you have down-voted */
    downVotedParam?: boolean;
    /** @description When the record was first created. Use UTC ISO 8601 YYYY-MM-DDThh:mm:ss datetime format. Time zone should be UTC and not local. */
    createdAtParam?: string;
    /** @description Ex: 1 */
    doNotConvertParam?: boolean;
    /** @description Ex: true */
    doNotProcessParam?: boolean;
    /** @description Excluded records with measurement times earlier than this value. Use UTC ISO 8601 YYYY-MM-DDThh:mm:ss  datetime format. Time zone should be UTC and not local. */
    earliestMeasurementTimeParam?: string;
    /** @description Provided variable is the effect or cause */
    effectOrCauseParam?: string;
    /** @description Deprecated: Name of the outcome variable of interest.  Ex: Overall Mood */
    effectVariableNameParam?: string;
    /** @description Variable id of the outcome variable of interest.  Ex: 1398 */
    effectVariableIdParam?: number;
    /** @description Require exact match */
    exactMatchParam?: boolean;
    /** @description Grant Type can be 'authorization_code' or 'refresh_token' */
    grantTypeParam: string;
    /** @description The time (in seconds) over which measurements are grouped together */
    groupingTimezoneParam?: string;
    /** @description The time (in seconds) over which measurements are grouped together */
    groupingWidthParam?: number;
    /** @description Return list of apps, studies, and individuals with access to user data */
    includeAuthorizedClientsParam?: boolean;
    /** @description Highcharts configs that can be used if you have highcharts.js included on the page.  This only works if the id or name query parameter is also provided. */
    includeChartsParam?: boolean;
    /** @description Include deleted variables */
    includeDeletedParam?: boolean;
    /** @description Include user-specific variables in results */
    includePrivateParam?: boolean;
    /** @description Include variables the user has no measurements for */
    includePublicParam?: boolean;
    /** @description Return parent, child, duplicate, and ingredient variables */
    includeTagsParam?: boolean;
    /** @description These are studies that you have joined */
    joinedParam?: boolean;
    /** @description Limit variables to those which measurements were last submitted by a specific source. So if you have a client application and you only want variables that were last updated by your app, you can include the name of your app here */
    lastSourceParam?: string;
    /** @description Excluded records with measurement times later than this value. Use UTC ISO 8601 YYYY-MM-DDThh:mm:ss  datetime format. Time zone should be UTC and not local. */
    latestMeasurementTimeParam?: string;
    /** @description The LIMIT is used to limit the number of results returned. So if youhave 1000 results, but only want to the first 10, you would set this to 10 and offset to 0. The maximum limit is 200 records. */
    limitParam?: number;
    /** @description Username or email */
    log?: string;
    /** @description Only include variables tracked manually by the user */
    manualTrackingParam?: boolean;
    /** @description Ex: 1 */
    minMaxFilterParam?: boolean;
    /** @description Filter variables by the total number of measurements that they have. This could be used of you want to filter or sort by popularity. */
    numberOfRawMeasurementsParam?: string;
    /** @description OFFSET says to skip that many rows before beginning to return rows to the client. OFFSET 0 is the same as omitting the OFFSET clause.If both OFFSET and LIMIT appear, then OFFSET rows are skipped before starting to count the LIMIT rows that are returned. */
    offsetParam?: number;
    /** @description Ex: 1 */
    onlyPastParam?: boolean;
    /** @description These are studies that anyone can join */
    openParam?: boolean;
    /** @description Only include user_variable_relationships for which the effect is an outcome of interest for the user */
    outcomesOfInterestParam?: boolean;
    /** @description Ex: chrome, android, ios, web */
    platform?: "chrome" | "android" | "ios" | "web";
    /** @description These are aggregated n=1 studies based on the entire population of users that have shared their data */
    aggregatedParam?: boolean;
    /** @description These are studies created by a specific principal investigator */
    principalInvestigatorUserIdParam?: number;
    /** @description Ex: */
    publicEffectOrCauseParam?: string;
    /** @description User password */
    pwd?: string;
    /** @description Recalculate instead of using cached analysis */
    recalculate?: boolean;
    /** @description The redirect URI is the URL within your client application that will receive the OAuth2 credentials. */
    redirectUriParam?: string;
    /** @description Ex: (lt)2017-07-31 21:43:26 */
    reminderTimeParam?: string;
    /** @description If the value is code, launches a Basic flow, requiring a POST to the token endpoint to obtain the tokens. If the value is token id_token or id_token token, launches an Implicit flow, requiring the use of Javascript at the redirect URI to retrieve tokens from the URI #fragment. */
    responseTypeParam: string;
    /** @description Scopes include basic, readmeasurements, and writemeasurements. The `basic` scope allows you to read user info (displayName, email, etc). The `readmeasurements` scope allows one to read a user's data. The `writemeasurements` scope allows you to write user data. Separate multiple scopes by a space. */
    scopeParam: string;
    /** @description Ex: %Body Fat% */
    searchPhraseParam?: string;
    /** @description Sort by one of the listed field names. If the field name is prefixed with `-`, it will sort in descending order. */
    sortParam?: string;
    /** @description ID of the source you want measurements for (supports exact name match only) */
    sourceNameParam?: string;
    /** @description An opaque string that is round-tripped in the protocol; that is to say, it is returned as a URI parameter in the Basic flow, and in the URI */
    stateParam?: string;
    /** @description Client id for the study you want */
    studyClientIdParam?: string;
    /** @description Ex: McDonalds hotcake */
    synonymsParam?: string;
    /** @description Id of the tagged variable (i.e. Lollipop) you would like to get variables it can be tagged with (i.e. Sugar).  Converted measurements of the tagged variable are included in analysis of the tag variable (i.e. ingredient). */
    taggedVariableIdParam?: number;
    /** @description Id of the tag variable (i.e. Sugar) you would like to get variables it can be tagged to (i.e. Lollipop).  Converted measurements of the tagged variable are included in analysis of the tag variable (i.e. ingredient). */
    tagVariableIdParam?: number;
    /** @description Ex: Milligrams */
    unitNameParam?: "% Recommended Daily Allowance" | "-4 to 4 Rating" | "0 to 1 Rating" | "0 to 5 Rating" | "1 to 10 Rating" | "1 to 5 Rating" | "Applications" | "Beats per Minute" | "Calories" | "Capsules" | "Centimeters" | "Count" | "Degrees Celsius" | "Degrees East" | "Degrees Fahrenheit" | "Degrees North" | "Dollars" | "Drops" | "Event" | "Feet" | "Grams" | "Hours" | "Inches" | "Index" | "Kilocalories" | "Kilograms" | "Kilometers" | "Liters" | "Meters" | "Micrograms" | "Micrograms per decilitre" | "Miles" | "Milligrams" | "Milliliters" | "Millimeters" | "Millimeters Merc" | "Milliseconds" | "Minutes" | "Pascal" | "Percent" | "Pieces" | "Pills" | "Pounds" | "Puffs" | "Seconds" | "Serving" | "Sprays" | "Tablets" | "Torr" | "Units" | "Yes/No" | "per Minute" | "Doses" | "Quarts" | "Ounces" | "International Units" | "Meters per Second";
    /** @description When the record was last updated. Use UTC ISO 8601 YYYY-MM-DDThh:mm:ss datetime format. Time zone should be UTC and not local. */
    updatedAtParam?: string;
    /** @description User's id */
    userIdParam?: number;
    /** @description Value of measurement */
    valueParam?: string;
    /** @description Ex: 13 */
    variableCategoryIdParam?: number;
    /** @description Ex: 13 */
    variableIdParam?: number;
    /** @description Ex: Emotions, Treatments, Symptoms... */
    variableCategoryNameParam?: "Activities" | "Books" | "Causes of Illness" | "Cognitive Performance" | "Conditions" | "Emotions" | "Environment" | "Foods" | "Location" | "Miscellaneous" | "Movies and TV" | "Music" | "Nutrients" | "Payments" | "Physical Activity" | "Physique" | "Sleep" | "Social Interactions" | "Software" | "Symptoms" | "Treatments" | "Vital Signs" | "Goals";
    /** @description Name of the variable you want measurements for */
    variableNameParam?: string;
    /** @description Only return field required for variable auto-complete searches.  The smaller size allows for storing more variable results locally reducing API requests. */
    conciseParam?: boolean;
  };
  requestBodies: {
    /** @description Variable user settings data */
    userVariablesParam: {
      content: {
        "application/json": components["schemas"]["Variable"][];
      };
    };
    /** @description Id of the variable whose measurements should be deleted */
    variableIdBodyParam: {
      content: {
        "application/json": components["schemas"]["UserVariableDelete"];
      };
    };
  };
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /**
   * Get units
   * @description Get a list of the available measurement units
   */
  getUnits: {
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          "application/json": components["schemas"]["Unit"][];
        };
      };
      /** @description Not Authenticated */
      401: {
        content: {
        };
      };
    };
  };
  /**
   * Get variables along with related user-specific analysis settings and statistics
   * @description Get variables. If the user has specified variable settings, these are provided instead of the common variable defaults.
   */
  getVariables: {
    parameters: {
      query?: {
        includeCharts?: components["parameters"]["includeChartsParam"];
        numberOfRawMeasurements?: components["parameters"]["numberOfRawMeasurementsParam"];
        userId?: components["parameters"]["userIdParam"];
        variableCategoryName?: components["parameters"]["variableCategoryNameParam"];
        /** @description Name of the variable. To get results matching a substring, add % as a wildcard as the first and/or last character of a query string parameter. In order to get variables that contain `Mood`, the following query should be used: ?variableName=%Mood% */
        name?: string;
        variableName?: components["parameters"]["variableNameParam"];
        updatedAt?: components["parameters"]["updatedAtParam"];
        sourceName?: components["parameters"]["sourceNameParam"];
        earliestMeasurementTime?: components["parameters"]["earliestMeasurementTimeParam"];
        latestMeasurementTime?: components["parameters"]["latestMeasurementTimeParam"];
        /** @description Common variable id */
        id?: number;
        lastSourceName?: components["parameters"]["lastSourceParam"];
        limit?: components["parameters"]["limitParam"];
        offset?: components["parameters"]["offsetParam"];
        sort?: components["parameters"]["sortParam"];
        includePublic?: components["parameters"]["includePublicParam"];
        manualTracking?: components["parameters"]["manualTrackingParam"];
        clientId?: components["parameters"]["clientIdParam"];
        /** @description UPC or other barcode scan result */
        upc?: string;
        effectOrCause?: components["parameters"]["effectOrCauseParam"];
        publicEffectOrCause?: components["parameters"]["publicEffectOrCauseParam"];
        exactMatch?: components["parameters"]["exactMatchParam"];
        variableCategoryId?: components["parameters"]["variableCategoryIdParam"];
        includePrivate?: components["parameters"]["includePrivateParam"];
        searchPhrase?: components["parameters"]["searchPhraseParam"];
        synonyms?: components["parameters"]["synonymsParam"];
        taggedVariableId?: components["parameters"]["taggedVariableIdParam"];
        tagVariableId?: components["parameters"]["tagVariableIdParam"];
        /** @description Id of the variable you would like to get variables that can be joined to.  This is used to merge duplicate variables.   If joinVariableId is specified, this returns only variables eligible to be joined to the variable specified by the joinVariableId. */
        joinVariableId?: number;
        /** @description Id of the parent category variable (i.e. Fruit) you would like to get eligible child sub-type variables (i.e. Apple) for.  Child variable measurements will be included in analysis of the parent variable.  For instance, a child sub-type of the parent category Fruit could be Apple.  When Apple is tagged with the parent category Fruit, Apple measurements will be included when Fruit is analyzed. */
        parentUserTagVariableId?: number;
        /** @description Id of the child sub-type variable (i.e. Apple) you would like to get eligible parent variables (i.e. Fruit) for.  Child variable measurements will be included in analysis of the parent variable.  For instance, a child sub-type of the parent category Fruit could be Apple. When Apple is tagged with the parent category Fruit, Apple measurements will be included when Fruit is analyzed. */
        childUserTagVariableId?: number;
        /** @description Id of the ingredient variable (i.e. Fructose)  you would like to get eligible ingredientOf variables (i.e. Apple) for.  IngredientOf variable measurements will be included in analysis of the ingredient variable.  For instance, a ingredientOf of variable Fruit could be Apple. */
        ingredientUserTagVariableId?: number;
        /** @description Id of the ingredientOf variable (i.e. Apple) you would like to get eligible ingredient variables (i.e. Fructose) for.  IngredientOf variable measurements will be included in analysis of the ingredient variable.  For instance, a ingredientOf of variable Fruit could be Apple. */
        ingredientOfUserTagVariableId?: number;
        /** @description Return only public and aggregated common variable data instead of user-specific variables */
        commonOnly?: boolean;
        /** @description Return only user-specific variables and data, excluding common aggregated variable data */
        userOnly?: boolean;
        includeTags?: components["parameters"]["includeTagsParam"];
        recalculate?: components["parameters"]["recalculate"];
        variableId?: components["parameters"]["variableIdParam"];
        concise?: components["parameters"]["conciseParam"];
        /** @description Regenerate charts instead of getting from the cache */
        refresh?: boolean;
      };
    };
    responses: {
      /** @description Variables returned */
      200: {
        content: {
          "application/json": components["schemas"]["Variable"][];
        };
      };
      /** @description Not Authenticated */
      401: {
        content: {
        };
      };
    };
  };
  /**
   * Update User Settings for a Variable
   * @description Users can change the parameters used in analysis of that variable such as the expected duration of action for a variable to have an effect, the estimated delay before the onset of action. In order to filter out erroneous data, they are able to set the maximum and minimum reasonable daily values for a variable.
   */
  postUserVariables: {
    parameters: {
      query?: {
        includePrivate?: components["parameters"]["includePrivateParam"];
        clientId?: components["parameters"]["clientIdParam"];
        includePublic?: components["parameters"]["includePublicParam"];
        searchPhrase?: components["parameters"]["searchPhraseParam"];
        exactMatch?: components["parameters"]["exactMatchParam"];
        manualTracking?: components["parameters"]["manualTrackingParam"];
        variableCategoryName?: components["parameters"]["variableCategoryNameParam"];
        variableCategoryId?: components["parameters"]["variableCategoryIdParam"];
        synonyms?: components["parameters"]["synonymsParam"];
      };
    };
    requestBody: components["requestBodies"]["userVariablesParam"];
    responses: {
      /** @description Successful Operation */
      201: {
        content: {
          "application/json": components["schemas"]["CommonResponse"];
        };
      };
      /** @description The received JSON was invalid or malformed */
      400: {
        content: {
        };
      };
      /** @description Not Authenticated */
      401: {
        content: {
        };
      };
      /** @description Unknown target user ID */
      404: {
        content: {
        };
      };
    };
  };
  /**
   * Get measurements for this user
   * @description Measurements are any value that can be recorded like daily steps, a mood rating, or apples eaten.
   */
  getMeasurements: {
    parameters: {
      query?: {
        variableName?: components["parameters"]["variableNameParam"];
        sort?: components["parameters"]["sortParam"];
        limit?: components["parameters"]["limitParam"];
        offset?: components["parameters"]["offsetParam"];
        variableCategoryName?: components["parameters"]["variableCategoryNameParam"];
        updatedAt?: components["parameters"]["updatedAtParam"];
        userId?: components["parameters"]["userIdParam"];
        sourceName?: components["parameters"]["sourceNameParam"];
        connectorName?: components["parameters"]["connectorNameParam"];
        value?: components["parameters"]["valueParam"];
        unitName?: components["parameters"]["unitNameParam"];
        earliestMeasurementTime?: components["parameters"]["earliestMeasurementTimeParam"];
        latestMeasurementTime?: components["parameters"]["latestMeasurementTimeParam"];
        createdAt?: components["parameters"]["createdAtParam"];
        /** @description Measurement id */
        id?: number;
        groupingWidth?: components["parameters"]["groupingWidthParam"];
        groupingTimezone?: components["parameters"]["groupingTimezoneParam"];
        doNotProcess?: components["parameters"]["doNotProcessParam"];
        clientId?: components["parameters"]["clientIdParam"];
        doNotConvert?: components["parameters"]["doNotConvertParam"];
        minMaxFilter?: components["parameters"]["minMaxFilterParam"];
      };
    };
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          "application/json": components["schemas"]["Measurement"][];
        };
      };
      /** @description Not Authenticated */
      401: {
        content: {
        };
      };
    };
  };
  /**
   * Post a new set or update existing measurements to the database
   * @description You can submit or update multiple measurements in a "measurements" sub-array.  If the variable these measurements correspond to does not already exist in the database, it will be automatically added.
   */
  postMeasurements: {
    parameters: {
      query?: {
        userId?: components["parameters"]["userIdParam"];
      };
    };
    /** @description An array of measurement sets containing measurement items you want to insert. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["MeasurementSet"][];
      };
    };
    responses: {
      /** @description Successful operation */
      201: {
        content: {
          "application/json": components["schemas"]["PostMeasurementsResponse"];
        };
      };
      /** @description Not Authenticated */
      401: {
        content: {
        };
      };
    };
  };
  /**
   * Update a measurement
   * @description Update a previously submitted measurement
   */
  updateMeasurement: {
    /** @description The id as well as the new startTime, note, and/or value of the measurement to be updated */
    requestBody: {
      content: {
        "application/json": components["schemas"]["MeasurementUpdate"];
      };
    };
    responses: {
      /** @description Successful Operation */
      201: {
        content: {
          "application/json": components["schemas"]["CommonResponse"];
        };
      };
      /** @description Not Authenticated */
      401: {
        content: {
        };
      };
    };
  };
  /**
   * Delete a measurement
   * @description Delete a previously submitted measurement
   */
  deleteMeasurement: {
    responses: {
      /** @description Successful Operation */
      204: {
        content: {
          "application/json": components["schemas"]["CommonResponse"];
        };
      };
      /** @description Not Authenticated */
      401: {
        content: {
        };
      };
    };
  };
  /**
   * Get client app settings
   * @description Get the settings for your application configurable at https://builder.quantimo.do
   */
  getAppSettings: {
    parameters: {
      query?: {
        clientId?: components["parameters"]["clientIdParam"];
        client_secret?: components["parameters"]["clientSecretParam"];
      };
    };
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          "application/json": components["schemas"]["AppSettingsResponse"];
        };
      };
      /** @description Successful operation */
      401: {
        content: {
          "application/json": components["schemas"]["JsonErrorResponse"];
        };
      };
      /** @description Not found */
      404: {
        content: {
        };
      };
      /** @description Internal server error */
      500: {
        content: {
        };
      };
    };
  };
  /**
   * Upload a spreadsheet with measurements
   * @description Import from a spreadsheet containing a Variable Name, Value, Measurement Event Time, and Abbreviated Unit Name field.  Here is an <a href="https://bit.ly/2jz7CNl" target="_blank">example spreadsheet</a> with allowed column names, units and time format.
   */
  measurementSpreadsheetUpload: {
    parameters: {
      query?: {
        userId?: components["parameters"]["userIdParam"];
      };
    };
    requestBody?: {
      content: {
        "multipart/form-data": {
          /** Format: binary */
          file?: string;
        };
      };
    };
    responses: {
      /** @description successful operation */
      201: {
        content: {
          "application/json": number;
        };
      };
    };
  };
  /**
   * Post Request for Measurements CSV
   * @description Use this endpoint to schedule a CSV export containing all user measurements to be emailed to the user within 24 hours.
   */
  measurementExportRequest: {
    parameters: {
      query?: {
        userId?: components["parameters"]["userIdParam"];
      };
    };
    responses: {
      /** @description successful operation */
      201: {
        content: {
          "application/json": number;
        };
      };
    };
  };
  /**
   * Mobile connect page
   * @description This page is designed to be opened in a webview.  Instead of using popup authentication boxes, it uses redirection. You can include the user's access_token as a URL parameter like https://api.quantimo.do/api/v3/connect/mobile?access_token=123
   */
  getMobileConnectPage: {
    parameters: {
      query?: {
        userId?: components["parameters"]["userIdParam"];
      };
    };
    responses: {
      /** @description Mobile connect page was returned */
      200: {
        content: {
        };
      };
      /** @description User token is missing */
      401: {
        content: {
        };
      };
      /** @description User token is incorrect */
      403: {
        content: {
        };
      };
    };
  };
  /**
   * List of Connectors
   * @description A connector pulls data from other data providers using their API or a screenscraper. Returns a list of all available connectors and information about them such as their id, name, whether the user has provided access, logo url, connection instructions, and the update history.
   */
  getConnectors: {
    parameters: {
      query?: {
        clientId?: components["parameters"]["clientIdParam"];
      };
    };
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          "application/json": components["schemas"]["GetConnectorsResponse"];
        };
      };
      /** @description Not Authenticated */
      401: {
        content: {
        };
      };
    };
  };
  /**
   * Obtain a token from 3rd party data source
   * @description Attempt to obtain a token from the data provider, store it in the database. With this, the connector to continue to obtain new user data until the token is revoked.
   */
  connectConnector: {
    parameters: {
      query?: {
        userId?: components["parameters"]["userIdParam"];
      };
      path: {
        connectorName: components["parameters"]["connectorNamePathParam"];
      };
    };
    responses: {
      /** @description Successful operation */
      200: {
        content: {
        };
      };
      /** @description Not Authenticated */
      401: {
        content: {
        };
      };
      /** @description Method not found. Could not execute the requested method. */
      404: {
        content: {
        };
      };
      /** @description Error during update. Unsupported response from update(). */
      500: {
        content: {
        };
      };
    };
  };
  /**
   * Delete stored connection info
   * @description The disconnect method deletes any stored tokens or connection information from the connectors database.
   */
  disconnectConnector: {
    parameters: {
      path: {
        connectorName: components["parameters"]["connectorNamePathParam"];
      };
    };
    responses: {
      /** @description Successful operation */
      200: {
        content: {
        };
      };
      /** @description Not Authenticated */
      401: {
        content: {
        };
      };
      /** @description Method not found. Could not execute the requested method. */
      404: {
        content: {
        };
      };
      /** @description Error during update. Unsupported response from update(). */
      500: {
        content: {
        };
      };
    };
  };
  /**
   * Sync with data source
   * @description The update method tells the QM Connector Framework to check with the data provider (such as Fitbit or MyFitnessPal) and retrieve any new measurements available.
   */
  updateConnector: {
    parameters: {
      query?: {
        userId?: components["parameters"]["userIdParam"];
      };
      path: {
        connectorName: components["parameters"]["connectorNamePathParam"];
      };
    };
    responses: {
      /** @description Connection Successful */
      200: {
        content: {
        };
      };
      /** @description Not Authenticated */
      401: {
        content: {
        };
      };
      /** @description Method not found. Could not execute the requested method. */
      404: {
        content: {
        };
      };
      /** @description Error during update. Unsupported response from update(). */
      500: {
        content: {
        };
      };
    };
  };
  /**
   * Get user_variable_relationships
   * @description Get a list of user_variable_relationships that can be used to display top predictors of a given outcome like mood, for instance.
   */
  getCorrelations: {
    parameters: {
      query?: {
        causeVariableName?: components["parameters"]["causeVariableNameParam"];
        effectVariableName?: components["parameters"]["effectVariableNameParam"];
        sort?: components["parameters"]["sortParam"];
        limit?: components["parameters"]["limitParam"];
        offset?: components["parameters"]["offsetParam"];
        userId?: components["parameters"]["userIdParam"];
        correlationCoefficient?: components["parameters"]["correlationCoefficientParam"];
        updatedAt?: components["parameters"]["updatedAtParam"];
        outcomesOfInterest?: components["parameters"]["outcomesOfInterestParam"];
        clientId?: components["parameters"]["clientIdParam"];
        /** @description Return only public, anonymized and aggregated population data instead of user-specific variables */
        commonOnly?: boolean;
      };
    };
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          "application/json": components["schemas"]["GetCorrelationsResponse"];
        };
      };
      /** @description Not Authenticated */
      401: {
        content: {
        };
      };
    };
  };
  /**
   * Post DeviceTokens
   * @description Post user token for Android, iOS, or web push notifications
   */
  postDeviceToken: {
    /** @description The platform and token */
    requestBody: {
      content: {
        "application/json": components["schemas"]["DeviceToken"];
      };
    };
    responses: {
      /** @description Successful operation */
      201: {
        content: {
        };
      };
      /** @description Not authenticated */
      401: {
        content: {
        };
      };
      /** @description Not found */
      404: {
        content: {
        };
      };
      /** @description Internal server error */
      500: {
        content: {
        };
      };
    };
  };
  /**
   * Tracking reminder notifications, messages, and study results
   * @description Tracking reminder notifications, messages, and study results
   */
  getFeed: {
    parameters: {
      query?: {
        sort?: components["parameters"]["sortParam"];
        userId?: components["parameters"]["userIdParam"];
        createdAt?: components["parameters"]["createdAtParam"];
        updatedAt?: components["parameters"]["updatedAtParam"];
        limit?: components["parameters"]["limitParam"];
        offset?: components["parameters"]["offsetParam"];
        clientId?: components["parameters"]["clientIdParam"];
      };
    };
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          "application/json": components["schemas"]["FeedResponse"];
        };
      };
    };
  };
  /**
   * Post user interactions with feed
   * @description Post user actions on feed cards
   */
  postFeed: {
    parameters: {
      query?: {
        userId?: components["parameters"]["userIdParam"];
        clientId?: components["parameters"]["clientIdParam"];
      };
    };
    /** @description Id of the tracking reminder notification to be snoozed */
    requestBody: {
      content: {
        "application/json": components["schemas"]["Card"][];
      };
    };
    responses: {
      /** @description Returns new feed cards */
      201: {
        content: {
          "application/json": components["schemas"]["FeedResponse"];
        };
      };
      /** @description Not Authenticated */
      401: {
        content: {
        };
      };
    };
  };
  /**
   * Get embeddable connect javascript
   * @description Get embeddable connect javascript. Usage:
   *   - Embedding in applications with popups for 3rd-party authentication
   * windows.
   *     Use `qmSetupInPopup` function after connecting `connect.js`.
   *   - Embedding in applications with popups for 3rd-party authentication
   * windows.
   *     Requires a selector to block. It will be embedded in this block.
   *     Use `qmSetupOnPage` function after connecting `connect.js`.
   *   - Embedding in mobile applications without popups for 3rd-party
   * authentication.
   *     Use `qmSetupOnMobile` function after connecting `connect.js`.
   *     If using in a Cordova application call  `qmSetupOnIonic` function after connecting `connect.js`.
   */
  getIntegrationJs: {
    parameters: {
      query?: {
        clientId?: components["parameters"]["clientIdParam"];
      };
    };
    responses: {
      /** @description Embeddable connect javascript was returned */
      200: {
        content: {
        };
      };
    };
  };
  /**
   * Get NotificationPreferences
   * @description Get NotificationPreferences
   */
  getNotificationPreferences: {
    responses: {
      /** @description Successful operation */
      200: {
        content: {
        };
      };
      /** @description Not authenticated */
      401: {
        content: {
        };
      };
      /** @description Not found */
      404: {
        content: {
        };
      };
      /** @description Internal server error */
      500: {
        content: {
        };
      };
    };
  };
  /**
   * Request Authorization Code
   * @description You can implement OAuth2 authentication to your application using our **OAuth2** endpoints.  You need to redirect users to `/oauth/authorize` endpoint to get an authorization code and include the parameters below.   This page will ask the user if they want to allow a client's application to submit or obtain data from their QM account. It will redirect the user to the url provided by the client application with the code as a query parameter or error in case of an error. See the /oauth/access_token endpoint for the next steps.
   */
  getOauthAuthorizationCode: {
    parameters: {
      query: {
        clientId?: components["parameters"]["clientIdParam"];
        client_secret?: components["parameters"]["clientSecretParam"];
        response_type: components["parameters"]["responseTypeParam"];
        scope: components["parameters"]["scopeParam"];
        redirect_uri?: components["parameters"]["redirectUriParam"];
        state?: components["parameters"]["stateParam"];
      };
    };
    responses: {
      /** @description Successful Operation */
      200: {
        content: {
        };
      };
      /** @description Not Authenticated */
      401: {
        content: {
        };
      };
    };
  };
  /**
   * Get a user access token
   * @description Client provides authorization token obtained from /oauth/authorize to this endpoint and  receives an access token. Access token can then be used to query API endpoints. ### Request Access Token After user approves your access to the given scope form the https:/api.quantimo.do/oauth/authorize endpoint, you'll receive an authorization code to request an access token. This time make a `POST` request to `/oauth/access_token` with parameters including: * `grant_type` Can be `authorization_code` or `refresh_token` since we are getting the `access_token` for the first time we don't have a `refresh_token` so this must be `authorization_code`. * `code` Authorization code you received with the previous request. * `redirect_uri` Your application's redirect url. ### Refreshing Access Token Access tokens expire at some point, to continue using our api you need to refresh them with `refresh_token` you received along with the `access_token`. To do this make a `POST` request to `/oauth/access_token` with correct parameters, which are: * `grant_type` This time grant type must be `refresh_token` since we have it. * `clientId` Your application's client id. * `client_secret` Your application's client secret. * `refresh_token` The refresh token you received with the `access_token`. Every request you make to this endpoint will give you a new refresh token and make the old one expired. So you can keep getting new access tokens with new refresh tokens. ### Using Access Token Currently we support 2 ways for this, you can't use both at the same time. * Adding access token to the request header as `Authorization: Bearer {access_token}` * Adding to the url as a query parameter `?access_token={access_token}` You can read more about OAuth2 from [here](https://oauth.net/2/)
   */
  getAccessToken: {
    parameters: {
      query: {
        clientId?: components["parameters"]["clientIdParam"];
        client_secret?: components["parameters"]["clientSecretParam"];
        grant_type: components["parameters"]["grantTypeParam"];
        code: components["parameters"]["codeParam"];
        response_type: components["parameters"]["responseTypeParam"];
        scope: components["parameters"]["scopeParam"];
        redirect_uri?: components["parameters"]["redirectUriParam"];
        state?: components["parameters"]["stateParam"];
      };
    };
    responses: {
      /** @description Successful Operation */
      200: {
        content: {
        };
      };
      /** @description Not Authenticated */
      401: {
        content: {
        };
      };
    };
  };
  /**
   * Get Authorized Apps, Studies, and Individuals
   * @description This is a list of individuals, apps, or studies with access to your measurements.
   */
  getShares: {
    parameters: {
      query?: {
        userId?: components["parameters"]["userIdParam"];
        createdAt?: components["parameters"]["createdAtParam"];
        updatedAt?: components["parameters"]["updatedAtParam"];
        clientId?: components["parameters"]["clientIdParam"];
        appVersion?: components["parameters"]["appVersionParam"];
        log?: components["parameters"]["log"];
        pwd?: components["parameters"]["pwd"];
      };
    };
    responses: {
      /** @description Successful Operation */
      200: {
        content: {
          "application/json": components["schemas"]["GetSharesResponse"];
        };
      };
      /** @description Not Authenticated */
      401: {
        content: {
        };
      };
    };
  };
  /**
   * Delete share
   * @description Remove access to user data for a given client_id associated with a given individual, app, or study
   */
  deleteShare: {
    parameters: {
      query: {
        /** @description Client id of the individual, study, or app that the user wishes to no longer have access to their data */
        clientIdToRevoke: string;
        /** @description Ex: I hate you! */
        reason?: string;
      };
    };
    responses: {
      /** @description Successful Operation */
      204: {
        content: {
          "application/json": components["schemas"]["User"];
        };
      };
      /** @description Not Authenticated */
      401: {
        content: {
        };
      };
    };
  };
  /**
   * Delete share
   * @description Invite someone to view your measurements
   */
  inviteShare: {
    parameters: {
      query?: {
        clientId?: components["parameters"]["clientIdParam"];
      };
    };
    /** @description Details about person to share with */
    requestBody: {
      content: {
        "application/json": components["schemas"]["ShareInvitationBody"];
      };
    };
    responses: {
      /** @description Successful Operation */
      204: {
        content: {
          "application/json": components["schemas"]["User"];
        };
      };
      /** @description Not Authenticated */
      401: {
        content: {
        };
      };
    };
  };
  /**
   * Get Personal or Population Studies
   * @description If you have enough data, this will be a list of your personal studies, otherwise it will consist of aggregated population studies.
   */
  getStudies: {
    parameters: {
      query?: {
        causeVariableName?: components["parameters"]["causeVariableNameParam"];
        effectVariableName?: components["parameters"]["effectVariableNameParam"];
        userId?: components["parameters"]["userIdParam"];
        clientId?: components["parameters"]["clientIdParam"];
        includeCharts?: components["parameters"]["includeChartsParam"];
        recalculate?: components["parameters"]["recalculate"];
        studyId?: components["parameters"]["studyClientIdParam"];
        sort?: components["parameters"]["sortParam"];
        limit?: components["parameters"]["limitParam"];
        offset?: components["parameters"]["offsetParam"];
        correlationCoefficient?: components["parameters"]["correlationCoefficientParam"];
        updatedAt?: components["parameters"]["updatedAtParam"];
        outcomesOfInterest?: components["parameters"]["outcomesOfInterestParam"];
        principalInvestigatorUserId?: components["parameters"]["principalInvestigatorUserIdParam"];
        open?: components["parameters"]["openParam"];
        joined?: components["parameters"]["joinedParam"];
        created?: components["parameters"]["createdParam"];
        aggregated?: components["parameters"]["aggregatedParam"];
        downvoted?: components["parameters"]["downVotedParam"];
      };
    };
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          "application/json": components["schemas"]["GetStudiesResponse"];
        };
      };
      /** @description Successful operation */
      401: {
        content: {
          "application/json": components["schemas"]["JsonErrorResponse"];
        };
      };
      /** @description Not found */
      404: {
        content: {
        };
      };
      /** @description Internal server error */
      500: {
        content: {
        };
      };
    };
  };
  /**
   * These are open studies that anyone can join
   * @description These are studies that anyone can join and share their data for the predictor and outcome variables of interest.
   */
  getOpenStudies: {
    parameters: {
      query?: {
        causeVariableName?: components["parameters"]["causeVariableNameParam"];
        effectVariableName?: components["parameters"]["effectVariableNameParam"];
        userId?: components["parameters"]["userIdParam"];
        clientId?: components["parameters"]["clientIdParam"];
        includeCharts?: components["parameters"]["includeChartsParam"];
        recalculate?: components["parameters"]["recalculate"];
        studyId?: components["parameters"]["studyClientIdParam"];
      };
    };
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          "application/json": components["schemas"]["GetStudiesResponse"];
        };
      };
      /** @description Successful operation */
      401: {
        content: {
          "application/json": components["schemas"]["JsonErrorResponse"];
        };
      };
      /** @description Not found */
      404: {
        content: {
        };
      };
      /** @description Internal server error */
      500: {
        content: {
        };
      };
    };
  };
  /**
   * Studies You Have Joined
   * @description These are studies that you are currently sharing your data with.
   */
  getStudiesJoined: {
    parameters: {
      query?: {
        causeVariableName?: components["parameters"]["causeVariableNameParam"];
        effectVariableName?: components["parameters"]["effectVariableNameParam"];
        sort?: components["parameters"]["sortParam"];
        limit?: components["parameters"]["limitParam"];
        offset?: components["parameters"]["offsetParam"];
        userId?: components["parameters"]["userIdParam"];
        correlationCoefficient?: components["parameters"]["correlationCoefficientParam"];
        updatedAt?: components["parameters"]["updatedAtParam"];
        outcomesOfInterest?: components["parameters"]["outcomesOfInterestParam"];
        clientId?: components["parameters"]["clientIdParam"];
      };
    };
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          "application/json": components["schemas"]["GetStudiesResponse"];
        };
      };
      /** @description Not Authenticated */
      401: {
        content: {
        };
      };
    };
  };
  /**
   * Get studies you have created
   * @description These are studies that you have created.
   */
  getStudiesCreated: {
    parameters: {
      query?: {
        causeVariableName?: components["parameters"]["causeVariableNameParam"];
        effectVariableName?: components["parameters"]["effectVariableNameParam"];
        sort?: components["parameters"]["sortParam"];
        limit?: components["parameters"]["limitParam"];
        offset?: components["parameters"]["offsetParam"];
        userId?: components["parameters"]["userIdParam"];
        updatedAt?: components["parameters"]["updatedAtParam"];
        clientId?: components["parameters"]["clientIdParam"];
      };
    };
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          "application/json": components["schemas"]["GetStudiesResponse"];
        };
      };
      /** @description Not Authenticated */
      401: {
        content: {
        };
      };
    };
  };
  /**
   * Publish Your Study
   * @description Make a study and all related measurements publicly visible by anyone
   */
  publishStudy: {
    parameters: {
      query?: {
        causeVariableName?: components["parameters"]["causeVariableNameParam"];
        effectVariableName?: components["parameters"]["effectVariableNameParam"];
        userId?: components["parameters"]["userIdParam"];
        clientId?: components["parameters"]["clientIdParam"];
        includeCharts?: components["parameters"]["includeChartsParam"];
        recalculate?: components["parameters"]["recalculate"];
        studyId?: components["parameters"]["studyClientIdParam"];
      };
    };
    responses: {
      /** @description Successful operation */
      201: {
        content: {
          "application/json": components["schemas"]["PostStudyPublishResponse"];
        };
      };
      /** @description Not authenticated */
      401: {
        content: {
        };
      };
      /** @description Not found */
      404: {
        content: {
        };
      };
      /** @description Internal server error */
      500: {
        content: {
        };
      };
    };
  };
  /**
   * Join a Study
   * @description Anonymously share measurements for specified variables
   */
  joinStudy: {
    parameters: {
      query?: {
        studyId?: components["parameters"]["studyClientIdParam"];
        causeVariableName?: components["parameters"]["causeVariableNameParam"];
        effectVariableName?: components["parameters"]["effectVariableNameParam"];
        userId?: components["parameters"]["userIdParam"];
        clientId?: components["parameters"]["clientIdParam"];
      };
    };
    responses: {
      /** @description Successful operation */
      201: {
        content: {
          "application/json": components["schemas"]["StudyJoinResponse"];
        };
      };
      /** @description Not authenticated */
      401: {
        content: {
        };
      };
      /** @description Not found */
      404: {
        content: {
        };
      };
      /** @description Internal server error */
      500: {
        content: {
        };
      };
    };
  };
  /**
   * Create a Study
   * @description Create an individual, group, or population study examining the relationship between a predictor and outcome variable. You will be given a study id which you can invite participants to join and share their measurements for the specified variables.
   */
  createStudy: {
    parameters: {
      query?: {
        clientId?: components["parameters"]["clientIdParam"];
      };
    };
    /** @description Details about the study you want to create */
    requestBody: {
      content: {
        "application/json": components["schemas"]["StudyCreationBody"];
      };
    };
    responses: {
      /** @description Successful operation */
      201: {
        content: {
          "application/json": components["schemas"]["PostStudyCreateResponse"];
        };
      };
      /** @description Not authenticated */
      401: {
        content: {
        };
      };
      /** @description Not found */
      404: {
        content: {
        };
      };
      /** @description Internal server error */
      500: {
        content: {
        };
      };
    };
  };
  /**
   * Get specific tracking reminder notifications
   * @description Specific tracking reminder notification instances that still need to be tracked.
   */
  getTrackingReminderNotifications: {
    parameters: {
      query?: {
        sort?: components["parameters"]["sortParam"];
        userId?: components["parameters"]["userIdParam"];
        createdAt?: components["parameters"]["createdAtParam"];
        updatedAt?: components["parameters"]["updatedAtParam"];
        limit?: components["parameters"]["limitParam"];
        offset?: components["parameters"]["offsetParam"];
        variableCategoryName?: components["parameters"]["variableCategoryNameParam"];
        reminderTime?: components["parameters"]["reminderTimeParam"];
        clientId?: components["parameters"]["clientIdParam"];
        onlyPast?: components["parameters"]["onlyPastParam"];
        includeDeleted?: components["parameters"]["includeDeletedParam"];
      };
    };
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          "application/json": components["schemas"]["GetTrackingReminderNotificationsResponse"];
        };
      };
    };
  };
  /**
   * Snooze, skip, or track a tracking reminder notification
   * @description Snooze, skip, or track a tracking reminder notification
   */
  postTrackingReminderNotifications: {
    parameters: {
      query?: {
        userId?: components["parameters"]["userIdParam"];
        clientId?: components["parameters"]["clientIdParam"];
      };
    };
    /** @description Id of the tracking reminder notification to be snoozed */
    requestBody: {
      content: {
        "application/json": components["schemas"]["TrackingReminderNotificationPost"][];
      };
    };
    responses: {
      /** @description Successful Operation */
      201: {
        content: {
          "application/json": components["schemas"]["CommonResponse"];
        };
      };
      /** @description Not Authenticated */
      401: {
        content: {
        };
      };
    };
  };
  /**
   * Get repeating tracking reminder settings
   * @description Users can be reminded to track certain variables at a specified frequency with a default value.
   */
  getTrackingReminders: {
    parameters: {
      query?: {
        userId?: components["parameters"]["userIdParam"];
        variableCategoryName?: components["parameters"]["variableCategoryNameParam"];
        createdAt?: components["parameters"]["createdAtParam"];
        updatedAt?: components["parameters"]["updatedAtParam"];
        limit?: components["parameters"]["limitParam"];
        offset?: components["parameters"]["offsetParam"];
        sort?: components["parameters"]["sortParam"];
        clientId?: components["parameters"]["clientIdParam"];
        appVersion?: components["parameters"]["appVersionParam"];
      };
    };
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          "application/json": components["schemas"]["TrackingReminder"][];
        };
      };
    };
  };
  /**
   * Store a Tracking Reminder
   * @description This is to enable users to create reminders to track a variable with a default value at a specified frequency
   */
  postTrackingReminders: {
    /** @description TrackingReminder that should be stored */
    requestBody: {
      content: {
        "application/json": components["schemas"]["TrackingReminder"][];
      };
    };
    responses: {
      /** @description Successful operation */
      201: {
        content: {
          "application/json": components["schemas"]["PostTrackingRemindersResponse"];
        };
      };
    };
  };
  /**
   * Delete Tracking Reminder
   * @description Stop getting notifications to record data for a variable.  Previously recorded measurements will be preserved.
   */
  deleteTrackingReminder: {
    parameters: {
      query?: {
        userId?: components["parameters"]["userIdParam"];
      };
    };
    responses: {
      /** @description Successful Operation */
      204: {
        content: {
          "application/json": components["schemas"]["CommonResponse"];
        };
      };
      /** @description Not Authenticated */
      401: {
        content: {
        };
      };
    };
  };
  /**
   * Get unit categories
   * @description Get a list of the categories of measurement units such as 'Distance', 'Duration', 'Energy', 'Frequency', 'Miscellany', 'Pressure', 'Proportion', 'Rating', 'Temperature', 'Volume', and 'Weight'.
   */
  getUnitCategories: {
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          "application/json": components["schemas"]["UnitCategory"][];
        };
      };
      /** @description Not Authenticated */
      401: {
        content: {
        };
      };
    };
  };
  /**
   * Get user info
   * @description Returns user info.  If no userId is specified, returns info for currently authenticated user
   */
  getUser: {
    parameters: {
      query?: {
        userId?: components["parameters"]["userIdParam"];
        createdAt?: components["parameters"]["createdAtParam"];
        updatedAt?: components["parameters"]["updatedAtParam"];
        limit?: components["parameters"]["limitParam"];
        offset?: components["parameters"]["offsetParam"];
        sort?: components["parameters"]["sortParam"];
        clientId?: components["parameters"]["clientIdParam"];
        appVersion?: components["parameters"]["appVersionParam"];
        clientUserId?: components["parameters"]["clientUserIdParam"];
        log?: components["parameters"]["log"];
        pwd?: components["parameters"]["pwd"];
        includeAuthorizedClients?: components["parameters"]["includeAuthorizedClientsParam"];
      };
    };
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          "application/json": components["schemas"]["User"];
        };
      };
      /** @description Not Authenticated */
      401: {
        content: {
        };
      };
    };
  };
  /**
   * Create or update user
   * @description Include your your system's user id as the clientUserId to make sure you can identify the user in your system. If the user already exists, the user will be updated with the new information.
   */
  postUser: {
    /** @description User info to update */
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserPostBody"];
      };
    };
    responses: {
      /** @description Successful operation */
      201: {
        content: never;
      };
      /** @description Not found */
      401: {
        content: never;
      };
    };
  };
  /**
   * Get users who shared data
   * @description Returns users who have granted access to their data
   */
  getUsers: {
    parameters: {
      query?: {
        userId?: components["parameters"]["userIdParam"];
        createdAt?: components["parameters"]["createdAtParam"];
        updatedAt?: components["parameters"]["updatedAtParam"];
        limit?: components["parameters"]["limitParam"];
        offset?: components["parameters"]["offsetParam"];
        sort?: components["parameters"]["sortParam"];
        clientId?: components["parameters"]["clientIdParam"];
        appVersion?: components["parameters"]["appVersionParam"];
        clientUserId?: components["parameters"]["clientUserIdParam"];
        log?: components["parameters"]["log"];
        pwd?: components["parameters"]["pwd"];
      };
    };
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          "application/json": components["schemas"]["UsersResponse"];
        };
      };
      /** @description Not Authenticated */
      401: {
        content: {
        };
      };
    };
  };
  /**
   * Delete user
   * @description Delete user account. Only the client app that created a user can delete that user.
   */
  deleteUser: {
    parameters: {
      query: {
        clientId?: components["parameters"]["clientIdParam"];
        /** @description Ex: I hate you! */
        reason: string;
      };
    };
    responses: {
      /** @description Successful Operation */
      204: {
        content: {
          "application/json": components["schemas"]["CommonResponse"];
        };
      };
      /** @description Not Authenticated */
      401: {
        content: {
        };
      };
    };
  };
  /**
   * Post UserSettings
   * @description Post UserSettings
   */
  postUserSettings: {
    parameters: {
      query?: {
        clientId?: components["parameters"]["clientIdParam"];
      };
    };
    /** @description User settings to update */
    requestBody: {
      content: {
        "application/json": components["schemas"]["User"];
      };
    };
    responses: {
      /** @description Successful operation */
      201: {
        content: {
          "application/json": components["schemas"]["PostUserSettingsResponse"];
        };
      };
      /** @description Not authenticated */
      401: {
        content: {
        };
      };
      /** @description Not found */
      404: {
        content: {
        };
      };
      /** @description Internal server error */
      500: {
        content: {
        };
      };
    };
  };
  /**
   * Post or update user tags or ingredients
   * @description This endpoint allows users to tag foods with their ingredients.  This information will then be used to infer the user intake of the different ingredients by just entering the foods. The inferred intake levels will then be used to determine the effects of different nutrients on the user during analysis.
   */
  postUserTags: {
    parameters: {
      query?: {
        userId?: components["parameters"]["userIdParam"];
      };
    };
    /** @description Contains the new user tag data */
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserTag"];
      };
    };
    responses: {
      /** @description Successful Operation */
      201: {
        content: {
          "application/json": components["schemas"]["CommonResponse"];
        };
      };
      /** @description Not Authenticated */
      401: {
        content: {
        };
      };
    };
  };
  /**
   * Delete user tag or ingredient
   * @description Delete previously created user tags or ingredients.
   */
  deleteUserTag: {
    parameters: {
      query?: {
        taggedVariableId?: components["parameters"]["taggedVariableIdParam"];
        tagVariableId?: components["parameters"]["tagVariableIdParam"];
      };
    };
    responses: {
      /** @description Successful Operation */
      204: {
        content: {
          "application/json": components["schemas"]["CommonResponse"];
        };
      };
      /** @description Not Authenticated */
      401: {
        content: {
        };
      };
    };
  };
  /**
   * Delete All Measurements For Variable
   * @description Users can delete all of their measurements for a variable
   */
  deleteUserVariable: {
    responses: {
      /** @description Successful operation */
      204: {
        content: {
        };
      };
      /** @description The received JSON was invalid or malformed */
      400: {
        content: {
        };
      };
      /** @description Not Authenticated */
      401: {
        content: {
        };
      };
      /** @description Unknown target user ID */
      404: {
        content: {
        };
      };
    };
  };
  /**
   * Reset user settings for a variable to defaults
   * @description Reset user settings for a variable to defaults
   */
  resetUserVariableSettings: {
    requestBody: components["requestBodies"]["variableIdBodyParam"];
    responses: {
      /** @description Successful operation */
      201: {
        content: {
        };
      };
      /** @description The received JSON was invalid or malformed */
      400: {
        content: {
        };
      };
      /** @description Not Authenticated */
      401: {
        content: {
        };
      };
      /** @description Unknown target user ID */
      404: {
        content: {
        };
      };
    };
  };
  /**
   * Variable categories
   * @description The variable categories include Activity, Causes of Illness, Cognitive Performance, Conditions, Environment, Foods, Location, Miscellaneous, Mood, Nutrition, Physical Activity, Physique, Sleep, Social Interactions, Symptoms, Treatments, Vital Signs, and Goals.
   */
  getVariableCategories: {
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          "application/json": components["schemas"]["VariableCategory"][];
        };
      };
      /** @description Not Authenticated */
      401: {
        content: {
        };
      };
    };
  };
  /**
   * Post or update vote
   * @description I am really good at finding user_variable_relationships and even compensating for various onset delays and durations of action. However, you are much better than me at knowing if there's a way that a given factor could plausibly influence an outcome. You can help me learn and get better at my predictions by pressing the thumbs down button for relationships that you think are coincidences and thumbs up once that make logic sense.
   */
  postVote: {
    parameters: {
      query?: {
        userId?: components["parameters"]["userIdParam"];
      };
    };
    /** @description Contains the cause variable, effect variable, and vote value. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["Vote"];
      };
    };
    responses: {
      /** @description Successful Operation */
      201: {
        content: {
          "application/json": components["schemas"]["CommonResponse"];
        };
      };
      /** @description Not Authenticated */
      401: {
        content: {
        };
      };
    };
  };
  /**
   * Delete vote
   * @description Delete previously posted vote
   */
  deleteVote: {
    parameters: {
      query?: {
        userId?: components["parameters"]["userIdParam"];
      };
    };
    responses: {
      /** @description Successful Operation */
      204: {
        content: {
          "application/json": components["schemas"]["CommonResponse"];
        };
      };
      /** @description Not Authenticated */
      401: {
        content: {
        };
      };
    };
  };
  /**
   * Get Study
   * @description Get Study
   */
  getStudy: {
    parameters: {
      query?: {
        causeVariableName?: components["parameters"]["causeVariableNameParam"];
        effectVariableName?: components["parameters"]["effectVariableNameParam"];
        userId?: components["parameters"]["userIdParam"];
        clientId?: components["parameters"]["clientIdParam"];
        includeCharts?: components["parameters"]["includeChartsParam"];
        recalculate?: components["parameters"]["recalculate"];
        studyId?: components["parameters"]["studyClientIdParam"];
      };
    };
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          "application/json": components["schemas"]["Study"];
        };
      };
      /** @description Successful operation */
      401: {
        content: {
          "application/json": components["schemas"]["JsonErrorResponse"];
        };
      };
      /** @description Not found */
      404: {
        content: {
        };
      };
      /** @description Internal server error */
      500: {
        content: {
        };
      };
    };
  };
}
